import json
import pytest
from hypothesis import given, strategies as st, settings, Phase
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
import pathlib
import os.path
from joblib import load


@pytest.fixture(autouse=True, scope='class')
def _setup(request):
    model_path = os.path.join(pathlib.Path(__file__).parent.resolve(), 'knn_model.joblib')
    request.cls.model = load(model_path)

    request.cls.data = dict()
    request.cls.data['n_test'] = 22
    request.cls.data['n_samples_per_test'] = 100
    request.cls.data['tests'] = dict()

    for i in range(request.cls.data['n_test']):
        teste_id = 'test_' + str(i + 1)
        request.cls.data['tests'][teste_id] = {'n_samples': 0, 'samples': [], 'y_expected': [], 'y_predicted': []}

    experiment_data_path = os.path.join(pathlib.Path(__file__).parent.resolve(), 'test_sonar_bva_experiment_data.json')
    yield experiment_data_path
    with open(experiment_data_path, mode='w') as json_file:
        json.dump(request.cls.data, json_file)


class TestSonarProperty:

    @given(st.floats(min_value=0.0317, max_value=0.03924, allow_nan=False),
           st.sampled_from([0.0065, 0.0165, 0.022, 0.0279, 0.0308, 0.0324, 0.0363, 0.0478, 0.0707, 0.0849]),
           st.floats(min_value=0.00186, max_value=0.00194, allow_nan=False),
           st.floats(min_value=0.04236, max_value=0.05149, allow_nan=False),
           st.sampled_from([0.0246, 0.0484, 0.0537, 0.0597, 0.0617, 0.0646, 0.08, 0.1218, 0.1437, 0.1693]),
           st.sampled_from([0.0226, 0.0481, 0.0561, 0.0932, 0.1103, 0.1215, 0.126, 0.1422, 0.1563, 0.1827]),
           st.sampled_from([0.0569, 0.0611, 0.0655, 0.0771, 0.0944, 0.099, 0.1438, 0.1853, 0.2217, 0.2417]),
           st.sampled_from([0.0391, 0.0828, 0.0929, 0.0989, 0.0996, 0.0997, 0.1103, 0.1108, 0.1692, 0.1902]),
           st.sampled_from([0.0368, 0.1171, 0.1237, 0.1708, 0.1976, 0.2361, 0.2592, 0.2984, 0.5276, 0.6828]),
           st.sampled_from([0.074, 0.1476, 0.1567, 0.1695, 0.2352, 0.2571, 0.2718, 0.3127, 0.3469, 0.5761]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.1335, 0.17, 0.2568, 0.2648, 0.2812, 0.2935, 0.3094, 0.3484, 0.3985, 0.4292]),
           st.sampled_from([0.2249, 0.2284, 0.2523, 0.2657, 0.2859, 0.2863, 0.2947, 0.3938, 0.5175, 0.6173]),
           st.sampled_from([0.1526, 0.1891, 0.1893, 0.2637, 0.3297, 0.3302, 0.3365, 0.3957, 0.4127, 0.5157]),
           st.sampled_from([0.1184, 0.1235, 0.1555, 0.178, 0.1782, 0.2584, 0.2759, 0.2965, 0.3352, 0.7367]),
           st.sampled_from([0.1308, 0.1791, 0.2956, 0.3737, 0.399, 0.4998, 0.5335, 0.5392, 0.661, 0.6632]),
           st.sampled_from([0.1781, 0.198, 0.2937, 0.3252, 0.442, 0.5386, 0.6237, 0.685, 0.8087, 0.9039]),
           st.sampled_from([0.1363, 0.1536, 0.2339, 0.2422, 0.2645, 0.2678, 0.2719, 0.272, 0.6921, 0.8977]),
           st.sampled_from([0.2828, 0.366, 0.5233, 0.5325, 0.5466, 0.652, 0.7726, 0.7922, 0.8067, 0.9361]),
           st.sampled_from([0.074, 0.1729, 0.3341, 0.3345, 0.5356, 0.6186, 0.8098, 0.9008, 0.901, 0.9911]),
           st.sampled_from([0.1624, 0.3906, 0.4102, 0.5116, 0.57, 0.7685, 0.7702, 0.8099, 0.8906, 0.8958]),
           st.sampled_from([0.3353, 0.3834, 0.5949, 0.6501, 0.789, 0.8147, 0.8158, 0.8257, 0.8667, 0.9982]),
           st.sampled_from([0.3914, 0.4332, 0.4337, 0.7007, 0.7246, 0.7978, 0.8067, 0.8276, 0.8697, 0.9014]),
           st.sampled_from([0.1611, 0.4898, 0.5281, 0.5426, 0.6403, 0.6803, 0.6913, 0.7918, 0.9173, 0.9853]),
           st.sampled_from([0.227, 0.3711, 0.3779, 0.6207, 0.6299, 0.6926, 0.7115, 0.951, 0.9536, 0.9865]),
           st.sampled_from([0.379, 0.4862, 0.5179, 0.5488, 0.7131, 0.846, 0.8912, 0.8938, 0.93, 0.9801]),
           st.sampled_from([0.1746, 0.2211, 0.2953, 0.3654, 0.7243, 0.8334, 0.918, 0.9184, 0.9454, 0.9822]),
           st.floats(min_value=0.79824, max_value=0.99069, allow_nan=False),
           st.sampled_from([0.104, 0.3161, 0.3372, 0.3907, 0.4146, 0.4158, 0.7811, 0.8348, 0.8984, 0.9328]),
           st.sampled_from([0.202, 0.3775, 0.396, 0.4789, 0.485, 0.5213, 0.5572, 0.6502, 0.7141, 0.7187]),
           st.sampled_from([0.2331, 0.295, 0.3264, 0.3293, 0.3485, 0.4091, 0.4393, 0.6108, 0.8828, 0.9273]),
           st.sampled_from([0.1276, 0.1713, 0.2945, 0.33, 0.3939, 0.484, 0.6033, 0.6297, 0.7995, 0.8202]),
           st.sampled_from([0.1089, 0.1645, 0.212, 0.2658, 0.2869, 0.3645, 0.52, 0.6824, 0.6865, 0.7204]),
           st.sampled_from([0.0968, 0.1906, 0.2866, 0.3095, 0.3204, 0.3842, 0.5012, 0.5227, 0.5961, 0.622]),
           st.sampled_from([0.1206, 0.1944, 0.2421, 0.2896, 0.296, 0.3638, 0.4833, 0.6447, 0.6673, 0.6755]),
           st.sampled_from([0.0185, 0.0801, 0.1525, 0.1799, 0.1817, 0.3958, 0.4195, 0.4296, 0.799, 0.9212]),
           st.sampled_from([0.0888, 0.1249, 0.1546, 0.1772, 0.1829, 0.3087, 0.506, 0.6903, 0.7356, 0.8195]),
           st.sampled_from([0.0936, 0.1226, 0.1386, 0.1586, 0.3314, 0.3514, 0.3958, 0.4237, 0.4442, 0.4455]),
           st.sampled_from([0.0959, 0.1072, 0.182, 0.3198, 0.3605, 0.3776, 0.5379, 0.5993, 0.6721, 0.6795]),
           st.sampled_from([0.0227, 0.1082, 0.1933, 0.2046, 0.2106, 0.2244, 0.2771, 0.2939, 0.3051, 0.4433]),
           st.sampled_from([0.0492, 0.2045, 0.2605, 0.2978, 0.3009, 0.3051, 0.3648, 0.3674, 0.4546, 0.5163]),
           st.sampled_from([0.0585, 0.1184, 0.2016, 0.2813, 0.2871, 0.3661, 0.4463, 0.4527, 0.7179, 0.7988]),
           st.sampled_from([0.078, 0.0834, 0.1639, 0.1867, 0.2019, 0.2385, 0.2983, 0.3736, 0.3795, 0.4806]),
           st.sampled_from([0.0377, 0.0722, 0.0816, 0.1359, 0.1767, 0.2092, 0.2872, 0.3202, 0.4322, 0.5245]),
           st.sampled_from([0.0589, 0.066, 0.0954, 0.1487, 0.1535, 0.201, 0.2101, 0.2846, 0.3517, 0.5616]),
           st.sampled_from([0.0757, 0.0768, 0.0779, 0.1058, 0.1216, 0.1714, 0.2438, 0.3097, 0.4232, 0.7292]),
           st.sampled_from([0.0849, 0.0959, 0.1013, 0.1112, 0.115, 0.1175, 0.1541, 0.1699, 0.1964, 0.263]),
           st.sampled_from([0.055, 0.072, 0.0777, 0.0859, 0.0927, 0.0943, 0.1005, 0.1082, 0.1128, 0.13]),
           st.sampled_from([0.0187, 0.0244, 0.0289, 0.0305, 0.0355, 0.0728, 0.0783, 0.0906, 0.0983, 0.099]),
           st.sampled_from([0.0059, 0.0089, 0.0097, 0.0211, 0.0219, 0.0227, 0.0235, 0.0241, 0.027, 0.029]),
           st.sampled_from([0.0063, 0.0071, 0.0092, 0.0109, 0.0121, 0.0122, 0.0128, 0.0243, 0.0329, 0.048]),
           st.sampled_from([0.0013, 0.0045, 0.0081, 0.0099, 0.0104, 0.0255, 0.0298, 0.0331, 0.0459, 0.0709]),
           st.sampled_from([0.0025, 0.0045, 0.0056, 0.0057, 0.0076, 0.0111, 0.0143, 0.0174, 0.0182, 0.0201]),
           st.sampled_from([0.0044, 0.0047, 0.0049, 0.0102, 0.0127, 0.0144, 0.0161, 0.0172, 0.0232, 0.0241]),
           st.sampled_from([0.0026, 0.0032, 0.0046, 0.0058, 0.0074, 0.0086, 0.0102, 0.012, 0.027, 0.0281]),
           st.sampled_from([0.0025, 0.0041, 0.0045, 0.0048, 0.005, 0.0053, 0.0084, 0.0092, 0.0249, 0.0394]),
           st.sampled_from([0.0009, 0.002, 0.0026, 0.0027, 0.0032, 0.0034, 0.0067, 0.0071, 0.0081, 0.0127]),
           st.sampled_from([0.001, 0.0021, 0.0035, 0.005, 0.006, 0.0068, 0.0093, 0.0141, 0.0224, 0.044]),
           st.sampled_from([0.0001, 0.0025, 0.0043, 0.0053, 0.0057, 0.006, 0.007, 0.0124, 0.0148, 0.021]),
           st.sampled_from([0.0029, 0.0035, 0.0047, 0.0057, 0.006, 0.0074, 0.0099, 0.01, 0.0126, 0.0143]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_1(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_1']['n_samples'] += 1
        self.data['tests']['test_1']['samples'].append(x_test)
        self.data['tests']['test_1']['y_expected'].append(y_expected[0])
        self.data['tests']['test_1']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.floats(min_value=0.0317, max_value=0.03924, allow_nan=False),
           st.sampled_from([0.0017, 0.0201, 0.022, 0.042, 0.0453, 0.0599, 0.0744, 0.083, 0.0901, 0.2339]),
           st.floats(min_value=0.00197, max_value=0.06275, exclude_min=True, allow_nan=False),
           st.floats(min_value=0.04236, max_value=0.05149, allow_nan=False),
           st.sampled_from([0.0397, 0.0519, 0.0611, 0.0752, 0.0788, 0.0883, 0.0887, 0.0936, 0.1276, 0.2252]),
           st.sampled_from([0.0349, 0.0385, 0.0756, 0.0783, 0.0833, 0.126, 0.1278, 0.1425, 0.1908, 0.2247]),
           st.sampled_from([0.0958, 0.1258, 0.1417, 0.1626, 0.2002, 0.2028, 0.2054, 0.2072, 0.2134, 0.3322]),
           st.sampled_from([0.013, 0.0447, 0.0456, 0.0805, 0.0907, 0.0991, 0.1117, 0.1176, 0.169, 0.4566]),
           st.sampled_from([0.0453, 0.0548, 0.1428, 0.1522, 0.1666, 0.183, 0.2107, 0.3074, 0.3175, 0.3595]),
           st.sampled_from([0.1334, 0.1375, 0.1533, 0.1567, 0.2013, 0.266, 0.4372, 0.5915, 0.5966, 0.7106]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.2154, 0.2442, 0.2497, 0.2615, 0.2721, 0.2807, 0.3309, 0.3431, 0.5611, 0.5632]),
           st.sampled_from([0.1732, 0.1936, 0.2249, 0.2419, 0.2743, 0.3004, 0.3116, 0.3672, 0.3843, 0.4622]),
           st.sampled_from([0.1253, 0.1526, 0.1727, 0.2956, 0.3002, 0.344, 0.3957, 0.4287, 0.4914, 0.595]),
           st.sampled_from([0.0775, 0.143, 0.165, 0.187, 0.2002, 0.2965, 0.3352, 0.4325, 0.499, 0.595]),
           st.sampled_from([0.0422, 0.11, 0.1534, 0.2401, 0.258, 0.3129, 0.3602, 0.4665, 0.6464, 0.6755]),
           st.sampled_from([0.0903, 0.1162, 0.1457, 0.1647, 0.2062, 0.2088, 0.442, 0.5334, 0.5655, 0.5954]),
           st.sampled_from([0.2449, 0.2719, 0.2862, 0.3887, 0.4394, 0.4646, 0.5947, 0.8476, 0.8977, 0.9208]),
           st.sampled_from([0.1228, 0.2745, 0.3241, 0.368, 0.4416, 0.647, 0.7309, 0.7922, 0.8456, 0.8782]),
           st.sampled_from([0.126, 0.1729, 0.174, 0.4293, 0.4871, 0.542, 0.6153, 0.7832, 0.8593, 0.8835]),
           st.sampled_from([0.2604, 0.3164, 0.5187, 0.6508, 0.6802, 0.7531, 0.796, 0.8346, 0.9144, 0.9779]),
           st.sampled_from([0.3291, 0.4786, 0.5944, 0.6373, 0.7052, 0.7983, 0.8268, 0.9247, 0.9338, 0.9614]),
           st.sampled_from([0.1703, 0.3523, 0.4333, 0.4337, 0.4585, 0.5469, 0.5534, 0.7007, 0.7717, 0.9093]),
           st.sampled_from([0.4357, 0.5697, 0.6889, 0.6913, 0.7936, 0.8473, 0.8837, 0.9201, 0.945, 0.9828]),
           st.sampled_from([0.2737, 0.4974, 0.5984, 0.6718, 0.7327, 0.7758, 0.9376, 0.9498, 0.9716, 0.9865]),
           st.sampled_from([0.1543, 0.2839, 0.6521, 0.6744, 0.8494, 0.8674, 0.8688, 0.9835, 0.9836, 1.0]),
           st.sampled_from([0.6255, 0.6534, 0.7567, 0.8499, 0.8706, 0.8754, 0.8787, 0.883, 0.9184, 0.9375]),
           st.floats(min_value=0.79824, max_value=0.99069, allow_nan=False),
           st.sampled_from([0.3108, 0.4399, 0.722, 0.7811, 0.8104, 0.8179, 0.8348, 0.8684, 0.8747, 0.904]),
           st.sampled_from([0.2891, 0.3369, 0.3391, 0.3456, 0.3833, 0.4439, 0.5215, 0.5667, 0.7412, 0.7821]),
           st.sampled_from([0.0482, 0.2684, 0.3293, 0.3367, 0.3714, 0.3825, 0.5403, 0.6457, 0.8828, 0.9513]),
           st.sampled_from([0.2443, 0.3242, 0.3296, 0.3339, 0.3939, 0.5443, 0.6666, 0.7446, 0.8086, 0.842]),
           st.sampled_from([0.0863, 0.1448, 0.1715, 0.228, 0.2997, 0.416, 0.424, 0.4336, 0.6705, 0.7791]),
           st.sampled_from([0.1437, 0.2196, 0.2413, 0.2908, 0.3244, 0.3968, 0.4132, 0.4853, 0.505, 0.6116]),
           st.sampled_from([0.0488, 0.0619, 0.1446, 0.1488, 0.1757, 0.3093, 0.333, 0.5666, 0.6378, 0.8626]),
           st.sampled_from([0.044, 0.0704, 0.0922, 0.0985, 0.1816, 0.2249, 0.2347, 0.739, 0.8406, 0.938]),
           st.sampled_from([0.0521, 0.1023, 0.1572, 0.158, 0.1781, 0.2369, 0.2562, 0.3809, 0.6938, 0.7848]),
           st.sampled_from([0.17, 0.2483, 0.3244, 0.3245, 0.3379, 0.339, 0.4442, 0.4455, 0.6176, 0.9016]),
           st.sampled_from([0.0436, 0.1652, 0.178, 0.1892, 0.2034, 0.2694, 0.3168, 0.3763, 0.5515, 0.6295]),
           st.sampled_from([0.1108, 0.1547, 0.1933, 0.2232, 0.3521, 0.4021, 0.4022, 0.4158, 0.4254, 0.5208]),
           st.sampled_from([0.0541, 0.0665, 0.0846, 0.1491, 0.1602, 0.1674, 0.197, 0.3258, 0.3454, 0.5046]),
           st.sampled_from([0.0443, 0.102, 0.1055, 0.1483, 0.1902, 0.2023, 0.3361, 0.4448, 0.4449, 0.6952]),
           st.sampled_from([0.1867, 0.1973, 0.247, 0.2564, 0.2706, 0.3261, 0.3524, 0.4655, 0.5351, 0.5512]),
           st.floats(min_value=0.02368, max_value=0.02959, allow_nan=False),
           st.sampled_from([0.0492, 0.1173, 0.1814, 0.1854, 0.2101, 0.2203, 0.2388, 0.3263, 0.4894, 0.5214]),
           st.sampled_from([0.0417, 0.1146, 0.1211, 0.1395, 0.1833, 0.2674, 0.3639, 0.4042, 0.4262, 0.5123]),
           st.sampled_from([0.0237, 0.0476, 0.0694, 0.079, 0.0797, 0.0912, 0.1013, 0.1084, 0.1964, 0.2526]),
           st.sampled_from([0.0372, 0.0954, 0.1034, 0.1069, 0.1097, 0.1185, 0.1196, 0.13, 0.1477, 0.2779]),
           st.sampled_from([0.037, 0.0395, 0.0469, 0.0489, 0.0501, 0.0531, 0.0762, 0.0769, 0.0783, 0.1092]),
           st.sampled_from([0.0065, 0.0086, 0.0117, 0.0134, 0.0201, 0.0216, 0.023, 0.0238, 0.0281, 0.0469]),
           st.sampled_from([0.0045, 0.0081, 0.0146, 0.0169, 0.0204, 0.0209, 0.0248, 0.0271, 0.031, 0.0361]),
           st.sampled_from([0.0095, 0.0099, 0.0122, 0.0141, 0.0142, 0.015, 0.021, 0.0217, 0.0298, 0.0709]),
           st.sampled_from([0.0023, 0.0046, 0.007, 0.0082, 0.0114, 0.0121, 0.0135, 0.0178, 0.021, 0.0317]),
           st.sampled_from([0.0018, 0.0022, 0.0054, 0.0072, 0.0074, 0.0077, 0.0104, 0.0108, 0.0141, 0.0161]),
           st.sampled_from([0.0022, 0.0034, 0.0038, 0.0043, 0.0058, 0.006, 0.0065, 0.0086, 0.0129, 0.0252]),
           st.sampled_from([0.0012, 0.0037, 0.0038, 0.0049, 0.0087, 0.0095, 0.0098, 0.0133, 0.0138, 0.0394]),
           st.sampled_from([0.0009, 0.0022, 0.0028, 0.0062, 0.0083, 0.0087, 0.0107, 0.0126, 0.0138, 0.0194]),
           st.sampled_from([0.0013, 0.0045, 0.0054, 0.0057, 0.0069, 0.0086, 0.0087, 0.0121, 0.0214, 0.0244]),
           st.sampled_from([0.0001, 0.0002, 0.0013, 0.0028, 0.006, 0.0073, 0.0126, 0.0148, 0.016, 0.0228]),
           st.sampled_from([0.0011, 0.0026, 0.0043, 0.0048, 0.005, 0.0078, 0.0124, 0.0126, 0.0187, 0.0208]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_2(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_2']['n_samples'] += 1
        self.data['tests']['test_2']['samples'].append(x_test)
        self.data['tests']['test_2']['y_expected'].append(y_expected[0])
        self.data['tests']['test_2']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.floats(min_value=0.0317, max_value=0.03924, allow_nan=False),
           st.sampled_from([0.0141, 0.0163, 0.0239, 0.0253, 0.0277, 0.0321, 0.0378, 0.0394, 0.0853, 0.1135]),
           st.floats(min_value=0.00197, max_value=0.06275, exclude_min=True, allow_nan=False),
           st.floats(min_value=0.04236, max_value=0.05149, allow_nan=False),
           st.sampled_from([0.0251, 0.0444, 0.0497, 0.0596, 0.0617, 0.0721, 0.1158, 0.1296, 0.133, 0.1443]),
           st.sampled_from([0.0277, 0.0324, 0.1022, 0.1125, 0.1227, 0.1256, 0.1278, 0.1795, 0.18, 0.277]),
           st.sampled_from([0.0684, 0.0773, 0.08, 0.0884, 0.1106, 0.1417, 0.1674, 0.1853, 0.1916, 0.3322]),
           st.sampled_from([0.0672, 0.0991, 0.1123, 0.1229, 0.1394, 0.1607, 0.1694, 0.346, 0.4262, 0.4566]),
           st.sampled_from([0.0494, 0.103, 0.1318, 0.187, 0.1977, 0.2107, 0.261, 0.2682, 0.2832, 0.3074]),
           st.sampled_from([0.0351, 0.1247, 0.1345, 0.1375, 0.2461, 0.266, 0.2954, 0.4125, 0.4372, 0.5378]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.0834, 0.2087, 0.2362, 0.2389, 0.3134, 0.375, 0.3999, 0.4292, 0.4499, 0.5611]),
           st.sampled_from([0.0616, 0.0717, 0.177, 0.2126, 0.2354, 0.2796, 0.3033, 0.4012, 0.4393, 0.5201]),
           st.sampled_from([0.2977, 0.344, 0.3495, 0.3829, 0.394, 0.4061, 0.4296, 0.4731, 0.5395, 0.7003]),
           st.sampled_from([0.1302, 0.1413, 0.2249, 0.2949, 0.3531, 0.3819, 0.401, 0.4713, 0.4725, 0.5095]),
           st.sampled_from([0.1405, 0.1967, 0.2055, 0.2808, 0.3002, 0.3889, 0.4191, 0.4499, 0.6087, 0.7221]),
           st.sampled_from([0.0886, 0.1313, 0.1901, 0.2086, 0.2732, 0.2937, 0.4221, 0.5386, 0.5655, 0.9039]),
           st.sampled_from([0.2248, 0.272, 0.3282, 0.3969, 0.4646, 0.5772, 0.5947, 0.6921, 0.7326, 0.8476]),
           st.sampled_from([0.1962, 0.212, 0.2745, 0.2784, 0.366, 0.4416, 0.4898, 0.6641, 0.7579, 0.8067]),
           st.sampled_from([0.2395, 0.2975, 0.6153, 0.6186, 0.6339, 0.7383, 0.7913, 0.7939, 0.8107, 0.8593]),
           st.sampled_from([0.0512, 0.3504, 0.5187, 0.5248, 0.5685, 0.6663, 0.7352, 0.8159, 0.8751, 0.8941]),
           st.sampled_from([0.2887, 0.3061, 0.3291, 0.3735, 0.4003, 0.632, 0.7581, 0.8454, 0.9247, 0.945]),
           st.sampled_from([0.4039, 0.4333, 0.4896, 0.6553, 0.8302, 0.8609, 0.8747, 0.9284, 0.9642, 0.9734]),
           st.sampled_from([0.4357, 0.6094, 0.6699, 0.6803, 0.7223, 0.7493, 0.7616, 0.7773, 0.9236, 0.9443]),
           st.sampled_from([0.1773, 0.2076, 0.6299, 0.7519, 0.7806, 0.8337, 0.8813, 0.8919, 0.9637, 1.0]),
           st.sampled_from([0.2279, 0.2854, 0.3562, 0.5572, 0.6521, 0.6767, 0.7053, 0.7595, 0.8991, 0.9711]),
           st.sampled_from([0.1746, 0.2234, 0.4162, 0.4915, 0.5027, 0.5514, 0.5707, 0.8406, 0.8809, 0.9375]),
           st.floats(min_value=0.06287, max_value=0.07148, allow_nan=False),
           st.sampled_from([0.104, 0.3161, 0.4517, 0.4565, 0.5765, 0.632, 0.7032, 0.8104, 0.9092, 0.9254]),
           st.sampled_from([0.2891, 0.3149, 0.3924, 0.4, 0.4124, 0.5572, 0.5962, 0.6213, 0.8425, 0.9087]),
           st.sampled_from([0.2936, 0.328, 0.3367, 0.3934, 0.5651, 0.5848, 0.6472, 0.8005, 0.8086, 0.9513]),
           st.sampled_from([0.1711, 0.2375, 0.293, 0.3296, 0.3397, 0.3964, 0.4303, 0.4355, 0.4465, 0.6408]),
           st.sampled_from([0.1715, 0.2186, 0.2308, 0.3578, 0.3903, 0.4038, 0.4715, 0.525, 0.537, 0.9425]),
           st.sampled_from([0.0431, 0.3095, 0.3263, 0.3308, 0.3524, 0.3763, 0.3974, 0.4048, 0.6643, 0.8726]),
           st.sampled_from([0.0349, 0.0619, 0.0849, 0.1641, 0.1848, 0.1866, 0.1906, 0.296, 0.5666, 0.731]),
           st.sampled_from([0.0434, 0.0922, 0.0944, 0.1039, 0.2347, 0.3172, 0.3762, 0.4195, 0.4219, 0.7109]),
           st.sampled_from([0.0351, 0.1023, 0.1066, 0.1681, 0.1709, 0.2626, 0.2824, 0.3167, 0.4118, 0.4716]),
           st.sampled_from([0.1262, 0.1411, 0.2054, 0.3367, 0.3626, 0.3881, 0.3885, 0.4455, 0.6496, 0.7792]),
           st.sampled_from([0.1583, 0.1637, 0.1768, 0.188, 0.2545, 0.3019, 0.325, 0.3655, 0.3927, 0.4277]),
           st.sampled_from([0.0426, 0.0768, 0.1127, 0.12, 0.138, 0.1432, 0.2939, 0.296, 0.4124, 0.6246]),
           st.sampled_from([0.1702, 0.1911, 0.2575, 0.2674, 0.3508, 0.3648, 0.4325, 0.4467, 0.5177, 0.525]),
           st.sampled_from([0.0448, 0.0824, 0.1055, 0.1239, 0.1591, 0.2423, 0.2831, 0.3651, 0.499, 0.5077]),
           st.sampled_from([0.1313, 0.1377, 0.1977, 0.2055, 0.2505, 0.337, 0.3632, 0.3863, 0.4323, 0.5027]),
           st.floats(min_value=0.02962, max_value=0.17893, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0945, 0.1155, 0.1192, 0.131, 0.1499, 0.1675, 0.2062, 0.3955, 0.413, 0.4268]),
           st.sampled_from([0.0443, 0.0581, 0.1003, 0.1097, 0.1211, 0.1806, 0.1833, 0.1883, 0.194, 0.4232]),
           st.sampled_from([0.0476, 0.0882, 0.1065, 0.1175, 0.1258, 0.1394, 0.1716, 0.1964, 0.1985, 0.2069]),
           st.sampled_from([0.0052, 0.0228, 0.0528, 0.0586, 0.1139, 0.1363, 0.1467, 0.1499, 0.1888, 0.2945]),
           st.sampled_from([0.0115, 0.0177, 0.0241, 0.0289, 0.0535, 0.0549, 0.0558, 0.0598, 0.0767, 0.0941]),
           st.sampled_from([0.0084, 0.0124, 0.0142, 0.0176, 0.0209, 0.0265, 0.0334, 0.0356, 0.0424, 0.0493]),
           st.sampled_from([0.0009, 0.0024, 0.0091, 0.0152, 0.0154, 0.0159, 0.0171, 0.0216, 0.0342, 0.038]),
           st.sampled_from([0.0033, 0.0053, 0.0095, 0.0098, 0.0105, 0.0164, 0.0181, 0.02, 0.021, 0.0444]),
           st.sampled_from([0.0027, 0.0063, 0.0068, 0.0076, 0.0099, 0.01, 0.0111, 0.0114, 0.0151, 0.0232]),
           st.sampled_from([0.0011, 0.0019, 0.0042, 0.0053, 0.0059, 0.0083, 0.0084, 0.0089, 0.0107, 0.0187]),
           st.sampled_from([0.0021, 0.0022, 0.0031, 0.0038, 0.0045, 0.0079, 0.0083, 0.0129, 0.014, 0.0209]),
           st.sampled_from([0.0008, 0.0026, 0.0035, 0.0037, 0.0046, 0.005, 0.0067, 0.0121, 0.0125, 0.0138]),
           st.sampled_from([0.0024, 0.0031, 0.004, 0.0045, 0.0048, 0.0081, 0.0086, 0.0121, 0.0124, 0.0218]),
           st.sampled_from([0.002, 0.0024, 0.0027, 0.0036, 0.0042, 0.007, 0.0079, 0.0086, 0.0087, 0.0162]),
           st.sampled_from([0.0017, 0.0022, 0.0043, 0.0051, 0.0059, 0.0095, 0.0114, 0.0124, 0.0154, 0.0161]),
           st.sampled_from([0.0014, 0.0031, 0.0036, 0.0037, 0.0042, 0.0043, 0.0048, 0.0056, 0.0143, 0.0156]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_3(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_3']['n_samples'] += 1
        self.data['tests']['test_3']['samples'].append(x_test)
        self.data['tests']['test_3']['y_expected'].append(y_expected[0])
        self.data['tests']['test_3']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.floats(min_value=0.0317, max_value=0.03924, allow_nan=False),
           st.sampled_from([0.0062, 0.0092, 0.0093, 0.0102, 0.0103, 0.0185, 0.0281, 0.0351, 0.04, 0.0808]),
           st.floats(min_value=0.00197, max_value=0.06275, exclude_min=True, allow_nan=False),
           st.floats(min_value=0.04236, max_value=0.05149, allow_nan=False),
           st.sampled_from([0.0097, 0.0211, 0.0217, 0.0339, 0.0362, 0.0681, 0.0752, 0.082, 0.1615, 0.1783]),
           st.sampled_from([0.0284, 0.0526, 0.0742, 0.0792, 0.0804, 0.0816, 0.086, 0.1342, 0.175, 0.3823]),
           st.sampled_from([0.0414, 0.0422, 0.0541, 0.0677, 0.0841, 0.0873, 0.092, 0.102, 0.1098, 0.1154]),
           st.sampled_from([0.0494, 0.0613, 0.0664, 0.0817, 0.0958, 0.1026, 0.1099, 0.1172, 0.1541, 0.1745]),
           st.sampled_from([0.0624, 0.0743, 0.0949, 0.0989, 0.1009, 0.1037, 0.1151, 0.1229, 0.1384, 0.3416]),
           st.sampled_from([0.0251, 0.0835, 0.0866, 0.1268, 0.137, 0.1483, 0.1487, 0.1838, 0.2111, 0.212]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.0269, 0.0273, 0.0639, 0.0946, 0.0948, 0.0996, 0.137, 0.1387, 0.2555, 0.3476]),
           st.sampled_from([0.0628, 0.089, 0.102, 0.1478, 0.1599, 0.2087, 0.2274, 0.2398, 0.3002, 0.5582]),
           st.sampled_from([0.0712, 0.1183, 0.1274, 0.2557, 0.263, 0.322, 0.3383, 0.3752, 0.5707, 0.8198]),
           st.sampled_from([0.0198, 0.1109, 0.1197, 0.1701, 0.184, 0.187, 0.2144, 0.2727, 0.5626, 0.5743]),
           st.sampled_from([0.0162, 0.2321, 0.243, 0.3463, 0.4376, 0.5367, 0.6931, 0.6985, 0.8073, 0.9751]),
           st.sampled_from([0.1179, 0.1699, 0.207, 0.2532, 0.259, 0.2826, 0.3943, 0.4022, 0.515, 0.9739]),
           st.sampled_from([0.1205, 0.1429, 0.1923, 0.2047, 0.2824, 0.3201, 0.3586, 0.5814, 0.9185, 1.0]),
           st.sampled_from([0.1397, 0.2032, 0.3295, 0.3819, 0.3924, 0.406, 0.5929, 0.6791, 0.7271, 0.9407]),
           st.sampled_from([0.1136, 0.141, 0.1544, 0.3226, 0.3501, 0.3658, 0.3813, 0.5224, 0.8129, 0.861]),
           st.sampled_from([0.2005, 0.3613, 0.4019, 0.4449, 0.446, 0.4978, 0.528, 0.5783, 0.7468, 0.9674]),
           st.sampled_from([0.1989, 0.4052, 0.4684, 0.5265, 0.7569, 0.7697, 0.8707, 0.8747, 0.8982, 0.9224]),
           st.sampled_from([0.143, 0.5312, 0.7389, 0.7484, 0.8643, 0.8773, 0.9273, 0.939, 0.9409, 0.948]),
           st.sampled_from([0.1686, 0.3691, 0.4012, 0.5906, 0.5973, 0.8966, 0.9027, 0.9174, 0.9432, 1.0]),
           st.sampled_from([0.0747, 0.2561, 0.325, 0.5331, 0.7745, 0.8505, 0.8677, 0.8762, 0.9118, 0.9371]),
           st.sampled_from([0.257, 0.5341, 0.5922, 0.6874, 0.7152, 0.7366, 0.7755, 0.8386, 0.8905, 0.9174]),
           st.sampled_from([0.1036, 0.2984, 0.3392, 0.3399, 0.5674, 0.6053, 0.7552, 0.8594, 0.8807, 0.8978]),
           st.floats(min_value=0.07151, max_value=0.25534, exclude_min=True, allow_nan=False),
           st.sampled_from([0.3474, 0.4019, 0.4056, 0.4488, 0.4856, 0.5009, 0.5578, 0.708, 0.9013, 0.9631]),
           st.sampled_from([0.3925, 0.4591, 0.4659, 0.6281, 0.6318, 0.7293, 0.8114, 0.8557, 0.866, 0.9166]),
           st.sampled_from([0.1307, 0.2268, 0.3791, 0.3851, 0.4766, 0.4906, 0.492, 0.554, 0.6292, 0.8096]),
           st.sampled_from([0.0773, 0.2576, 0.4007, 0.4323, 0.5049, 0.5181, 0.5499, 0.681, 0.7352, 0.8835]),
           st.sampled_from([0.099, 0.1386, 0.1862, 0.1863, 0.3459, 0.5588, 0.6084, 0.6601, 0.6832, 0.7547]),
           st.sampled_from([0.1107, 0.1588, 0.1693, 0.2112, 0.2227, 0.3082, 0.4786, 0.5159, 0.5389, 0.8708]),
           st.sampled_from([0.1951, 0.2757, 0.3967, 0.3984, 0.4396, 0.568, 0.5725, 0.6825, 0.7676, 0.8573]),
           st.sampled_from([0.0899, 0.105, 0.1975, 0.3649, 0.5122, 0.5271, 0.5393, 0.5564, 0.7313, 0.896]),
           st.sampled_from([0.0429, 0.0795, 0.4041, 0.448, 0.5516, 0.5715, 0.6116, 0.6253, 0.6359, 0.7766]),
           st.sampled_from([0.0667, 0.1048, 0.1358, 0.1589, 0.3466, 0.3505, 0.3683, 0.379, 0.4129, 0.8409]),
           st.sampled_from([0.0528, 0.0712, 0.1166, 0.1762, 0.2474, 0.2924, 0.3312, 0.4611, 0.4993, 0.9709]),
           st.sampled_from([0.0117, 0.0452, 0.1469, 0.1536, 0.188, 0.189, 0.197, 0.243, 0.3662, 0.4782]),
           st.sampled_from([0.051, 0.1088, 0.153, 0.1552, 0.161, 0.1972, 0.1979, 0.2044, 0.3132, 0.42]),
           st.sampled_from([0.0334, 0.0644, 0.1449, 0.1754, 0.2196, 0.2328, 0.4105, 0.4813, 0.6378, 0.7247]),
           st.sampled_from([0.0609, 0.071, 0.0835, 0.1575, 0.1597, 0.1756, 0.1902, 0.1983, 0.2121, 0.2129]),
           st.floats(min_value=0.02962, max_value=0.17893, exclude_min=True, allow_nan=False),
           st.sampled_from([0.026, 0.0536, 0.0894, 0.0908, 0.1304, 0.1326, 0.1418, 0.1512, 0.1586, 0.2378]),
           st.sampled_from([0.0422, 0.0508, 0.0635, 0.0663, 0.091, 0.1668, 0.1717, 0.1917, 0.2193, 0.22]),
           st.sampled_from([0.0073, 0.0241, 0.0322, 0.0469, 0.0493, 0.0602, 0.0844, 0.1018, 0.119, 0.1587]),
           st.sampled_from([0.0114, 0.0254, 0.0494, 0.0513, 0.0692, 0.0744, 0.0752, 0.0919, 0.1164, 0.1498]),
           st.sampled_from([0.0092, 0.0093, 0.0155, 0.0174, 0.0176, 0.0235, 0.0272, 0.0306, 0.0748, 0.0773]),
           st.sampled_from([0.0047, 0.0064, 0.0088, 0.0144, 0.0162, 0.0196, 0.0224, 0.0294, 0.0318, 0.0398]),
           st.sampled_from([0.0023, 0.0025, 0.0033, 0.0045, 0.0048, 0.0115, 0.0174, 0.0252, 0.0309, 0.0426]),
           st.sampled_from([0.0022, 0.0031, 0.0035, 0.0038, 0.0067, 0.0072, 0.0091, 0.0162, 0.0172, 0.0223]),
           st.sampled_from([0.0035, 0.0045, 0.0048, 0.007, 0.0071, 0.0104, 0.0111, 0.0122, 0.0166, 0.0223]),
           st.sampled_from([0.0038, 0.0076, 0.0081, 0.0085, 0.0117, 0.0129, 0.0142, 0.0145, 0.0171, 0.0204]),
           st.sampled_from([0.0022, 0.003, 0.0044, 0.0055, 0.0068, 0.007, 0.0094, 0.0105, 0.0114, 0.012]),
           st.sampled_from([0.0022, 0.003, 0.0036, 0.005, 0.006, 0.0092, 0.0093, 0.0096, 0.0116, 0.0137]),
           st.sampled_from([0.0011, 0.0017, 0.0024, 0.0026, 0.0032, 0.0089, 0.014, 0.018, 0.0217, 0.0229]),
           st.sampled_from([0.0003, 0.0023, 0.0031, 0.0068, 0.0081, 0.0084, 0.0093, 0.014, 0.0162, 0.018]),
           st.sampled_from([0.0008, 0.0013, 0.0026, 0.0048, 0.0049, 0.0052, 0.0066, 0.0104, 0.0117, 0.0147]),
           st.sampled_from([0.0012, 0.0019, 0.0036, 0.0037, 0.0045, 0.0054, 0.0055, 0.0056, 0.0073, 0.0173]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_4(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_4']['n_samples'] += 1
        self.data['tests']['test_4']['samples'].append(x_test)
        self.data['tests']['test_4']['y_expected'].append(y_expected[0])
        self.data['tests']['test_4']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.floats(min_value=0.03927, max_value=0.05883, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0027, 0.012, 0.0128, 0.0173, 0.0221, 0.0252, 0.0478, 0.0625, 0.083, 0.1163]),
           st.sampled_from([0.0116, 0.0167, 0.0223, 0.027, 0.0381, 0.0384, 0.049, 0.0709, 0.0866, 0.1447]),
           st.floats(min_value=0.04236, max_value=0.05149, allow_nan=False),
           st.sampled_from([0.0251, 0.0613, 0.0752, 0.0784, 0.0788, 0.0915, 0.0936, 0.1127, 0.1158, 0.1296]),
           st.sampled_from([0.0472, 0.0545, 0.0629, 0.0844, 0.0958, 0.0973, 0.1146, 0.1524, 0.1801, 0.2431]),
           st.sampled_from([0.0655, 0.0684, 0.0747, 0.0881, 0.1016, 0.1056, 0.1154, 0.1201, 0.1232, 0.1463]),
           st.sampled_from([0.0768, 0.0813, 0.0862, 0.1103, 0.1298, 0.1684, 0.1717, 0.185, 0.2287, 0.4223]),
           st.sampled_from([0.1318, 0.146, 0.1522, 0.1553, 0.1708, 0.1929, 0.1976, 0.2105, 0.3061, 0.307]),
           st.sampled_from([0.0279, 0.1508, 0.1853, 0.2013, 0.2571, 0.2822, 0.2954, 0.5025, 0.5966, 0.7106]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.084, 0.0904, 0.0991, 0.1734, 0.2442, 0.2615, 0.2681, 0.3108, 0.375, 0.5364]),
           st.sampled_from([0.1771, 0.2209, 0.2624, 0.2863, 0.2934, 0.3206, 0.4032, 0.4144, 0.4576, 0.5554]),
           st.sampled_from([0.1039, 0.1727, 0.2059, 0.2577, 0.3365, 0.4296, 0.4731, 0.4972, 0.5395, 0.5684]),
           st.sampled_from([0.0669, 0.0673, 0.1159, 0.1165, 0.337, 0.3907, 0.401, 0.452, 0.5369, 0.8392]),
           st.sampled_from([0.11, 0.2401, 0.258, 0.2666, 0.2856, 0.3956, 0.399, 0.4191, 0.4579, 0.7487]),
           st.sampled_from([0.1796, 0.2732, 0.291, 0.3685, 0.3748, 0.3962, 0.505, 0.5996, 0.6588, 0.9786]),
           st.sampled_from([0.1755, 0.1859, 0.2417, 0.2758, 0.2975, 0.305, 0.3282, 0.5441, 0.8025, 0.8925]),
           st.sampled_from([0.1908, 0.2344, 0.2355, 0.2784, 0.3382, 0.4088, 0.6995, 0.7782, 0.822, 0.9805]),
           st.sampled_from([0.0902, 0.174, 0.4079, 0.6166, 0.6186, 0.6788, 0.6936, 0.8097, 0.8672, 0.8982]),
           st.sampled_from([0.1624, 0.489, 0.6527, 0.7044, 0.7209, 0.7702, 0.7992, 0.8396, 0.855, 1.0]),
           st.sampled_from([0.2143, 0.3324, 0.3712, 0.6373, 0.6498, 0.8125, 0.8562, 0.9422, 0.9614, 0.9668]),
           st.sampled_from([0.1703, 0.4333, 0.5232, 0.598, 0.6553, 0.7526, 0.8302, 0.8969, 0.8974, 0.9739]),
           st.sampled_from([0.1928, 0.4532, 0.5134, 0.5281, 0.686, 0.6889, 0.6911, 0.7435, 0.9102, 0.9607]),
           st.sampled_from([0.5103, 0.5771, 0.6484, 0.6665, 0.7519, 0.881, 0.9104, 0.9498, 0.9637, 0.9738]),
           st.sampled_from([0.3172, 0.5324, 0.5488, 0.7985, 0.8395, 0.8494, 0.8792, 0.8959, 0.947, 0.9945]),
           st.sampled_from([0.0989, 0.1746, 0.2211, 0.2571, 0.2908, 0.7688, 0.775, 0.8847, 0.9454, 0.9564]),
           st.floats(min_value=0.79824, max_value=0.99069, allow_nan=False),
           st.sampled_from([0.1949, 0.246, 0.3777, 0.4158, 0.4517, 0.4732, 0.7306, 0.8528, 0.8881, 0.8937]),
           st.sampled_from([0.3369, 0.3822, 0.4016, 0.5758, 0.6409, 0.6585, 0.8591, 0.8892, 0.9151, 1.0]),
           st.sampled_from([0.1, 0.2767, 0.3367, 0.4301, 0.5403, 0.5638, 0.6167, 0.8528, 0.8787, 0.9065]),
           st.sampled_from([0.1713, 0.2247, 0.2375, 0.279, 0.2822, 0.293, 0.3169, 0.3335, 0.4219, 0.7009]),
           st.sampled_from([0.1768, 0.204, 0.2525, 0.3399, 0.4316, 0.4434, 0.5086, 0.5756, 0.6657, 0.7791]),
           st.sampled_from([0.2066, 0.2398, 0.3009, 0.3016, 0.3411, 0.3791, 0.4476, 0.5234, 0.8703, 0.8726]),
           st.sampled_from([0.0864, 0.1677, 0.1757, 0.2183, 0.2189, 0.2849, 0.5248, 0.5926, 0.6172, 0.6983]),
           st.sampled_from([0.0754, 0.0801, 0.1245, 0.1394, 0.1588, 0.2138, 0.3042, 0.376, 0.3762, 0.3958]),
           st.sampled_from([0.097, 0.157, 0.2062, 0.2244, 0.2824, 0.4532, 0.4773, 0.7337, 0.842, 0.88]),
           st.sampled_from([0.0836, 0.2408, 0.3156, 0.3514, 0.3629, 0.3941, 0.3958, 0.4664, 0.5955, 0.7792]),
           st.sampled_from([0.0894, 0.1215, 0.1416, 0.1637, 0.3391, 0.3762, 0.3763, 0.3765, 0.4731, 0.5725]),
           st.sampled_from([0.0227, 0.0426, 0.1593, 0.176, 0.1933, 0.2039, 0.2178, 0.4158, 0.424, 0.5208]),
           st.sampled_from([0.036, 0.1322, 0.1747, 0.1773, 0.2144, 0.2605, 0.2674, 0.2762, 0.3194, 0.3508]),
           st.sampled_from([0.1195, 0.2407, 0.2458, 0.2785, 0.3661, 0.4312, 0.4469, 0.4729, 0.5417, 0.8246]),
           st.sampled_from([0.1086, 0.1177, 0.1887, 0.1977, 0.2019, 0.2061, 0.224, 0.247, 0.324, 0.5512]),
           st.sampled_from([0.0991, 0.1391, 0.1502, 0.1753, 0.2231, 0.2256, 0.2808, 0.3387, 0.4491, 0.5245]),
           st.sampled_from([0.0673, 0.0769, 0.091, 0.0945, 0.1031, 0.1283, 0.1487, 0.1577, 0.2388, 0.4125]),
           st.sampled_from([0.0138, 0.0487, 0.0785, 0.092, 0.1097, 0.1216, 0.1299, 0.2246, 0.3593, 0.5904]),
           st.sampled_from([0.0523, 0.0797, 0.0899, 0.0959, 0.1344, 0.1521, 0.157, 0.184, 0.2069, 0.2739]),
           st.sampled_from([0.0223, 0.0744, 0.096, 0.1035, 0.1196, 0.1359, 0.1467, 0.1499, 0.179, 0.2559]),
           st.sampled_from([0.0112, 0.0115, 0.0187, 0.0477, 0.0658, 0.0703, 0.0884, 0.0922, 0.1129, 0.1584]),
           st.sampled_from([0.0057, 0.0118, 0.0122, 0.0134, 0.0137, 0.0177, 0.0201, 0.0216, 0.0246, 0.0772]),
           st.sampled_from([0.0041, 0.0118, 0.0125, 0.013, 0.0146, 0.0155, 0.0159, 0.0208, 0.0222, 0.0346]),
           st.sampled_from([0.0013, 0.0033, 0.0053, 0.0054, 0.0091, 0.0098, 0.0105, 0.0176, 0.0181, 0.0309]),
           st.sampled_from([0.0035, 0.0036, 0.0039, 0.006, 0.0062, 0.0065, 0.0067, 0.011, 0.0136, 0.0317]),
           st.sampled_from([0.0031, 0.0053, 0.0096, 0.01, 0.0126, 0.015, 0.0161, 0.0232, 0.0237, 0.0272]),
           st.sampled_from([0.0015, 0.0028, 0.0039, 0.0058, 0.0087, 0.012, 0.0129, 0.019, 0.0252, 0.0372]),
           st.sampled_from([0.0008, 0.0013, 0.004, 0.0046, 0.0049, 0.011, 0.0114, 0.0129, 0.0131, 0.0157]),
           st.sampled_from([0.0021, 0.0045, 0.0052, 0.0071, 0.0078, 0.0084, 0.0089, 0.0092, 0.019, 0.0218]),
           st.sampled_from([0.001, 0.0017, 0.0033, 0.0046, 0.0047, 0.0103, 0.0108, 0.0127, 0.0377, 0.044]),
           st.sampled_from([0.0017, 0.0026, 0.0035, 0.0043, 0.0047, 0.0067, 0.0068, 0.0079, 0.0082, 0.0246]),
           st.sampled_from([0.0006, 0.0019, 0.0028, 0.0052, 0.0066, 0.0085, 0.0101, 0.0103, 0.0115, 0.0157]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_5(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_5']['n_samples'] += 1
        self.data['tests']['test_5']['samples'].append(x_test)
        self.data['tests']['test_5']['y_expected'].append(y_expected[0])
        self.data['tests']['test_5']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0056, 0.0197, 0.0211, 0.0249, 0.0261, 0.027, 0.0368, 0.0374, 0.0394, 0.115]),
           st.sampled_from([0.0136, 0.0178, 0.022, 0.0324, 0.0383, 0.0387, 0.0599, 0.0744, 0.1249, 0.1574]),
           st.sampled_from([0.015, 0.0214, 0.0282, 0.0289, 0.0341, 0.0352, 0.0384, 0.0629, 0.0926, 0.0992]),
           st.floats(min_value=0.04236, max_value=0.05149, allow_nan=False),
           st.sampled_from([0.0232, 0.0484, 0.0645, 0.0698, 0.0752, 0.08, 0.0993, 0.1043, 0.107, 0.1276]),
           st.sampled_from([0.083, 0.0973, 0.0998, 0.1027, 0.1121, 0.1171, 0.1515, 0.1827, 0.1908, 0.2431]),
           st.sampled_from([0.0279, 0.0569, 0.0665, 0.0939, 0.0955, 0.1005, 0.1024, 0.1154, 0.1709, 0.2495]),
           st.sampled_from([0.0813, 0.0996, 0.1123, 0.1224, 0.1388, 0.1787, 0.1918, 0.214, 0.2337, 0.2678]),
           st.sampled_from([0.103, 0.1136, 0.1419, 0.1697, 0.1777, 0.187, 0.2119, 0.3074, 0.3175, 0.3295]),
           st.sampled_from([0.0686, 0.0998, 0.1114, 0.1779, 0.1923, 0.2531, 0.2544, 0.272, 0.3597, 0.3997]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.1084, 0.1377, 0.2023, 0.2374, 0.2473, 0.2484, 0.3553, 0.3988, 0.5239, 0.5771]),
           st.sampled_from([0.2076, 0.2284, 0.2381, 0.2624, 0.2859, 0.299, 0.3033, 0.3141, 0.3682, 0.5959]),
           st.sampled_from([0.1023, 0.1926, 0.1951, 0.2547, 0.2614, 0.2637, 0.3334, 0.3769, 0.4677, 0.5684]),
           st.sampled_from([0.0668, 0.204, 0.2226, 0.2249, 0.2869, 0.3352, 0.366, 0.4266, 0.4725, 0.6421]),
           st.sampled_from([0.1967, 0.2055, 0.2534, 0.3075, 0.3129, 0.3234, 0.3956, 0.4331, 0.5107, 0.5335]),
           st.sampled_from([0.0903, 0.1162, 0.2143, 0.2297, 0.3041, 0.3426, 0.3962, 0.4835, 0.5954, 0.6588]),
           st.sampled_from([0.0849, 0.218, 0.2449, 0.2645, 0.3709, 0.3715, 0.4646, 0.5947, 0.7577, 0.8006]),
           st.sampled_from([0.1151, 0.2026, 0.2071, 0.3241, 0.3382, 0.339, 0.5233, 0.6803, 0.7917, 0.8357]),
           st.sampled_from([0.126, 0.4552, 0.5961, 0.7154, 0.726, 0.7912, 0.7913, 0.8092, 0.8097, 0.9399]),
           st.sampled_from([0.1624, 0.3786, 0.383, 0.5116, 0.6753, 0.6918, 0.7271, 0.8646, 0.8958, 0.9891]),
           st.sampled_from([0.3061, 0.3735, 0.385, 0.5231, 0.6572, 0.667, 0.7918, 0.8045, 0.8384, 0.8717]),
           st.sampled_from([0.1012, 0.1703, 0.2046, 0.6553, 0.7136, 0.7143, 0.7983, 0.8328, 0.8385, 0.9284]),
           st.sampled_from([0.0239, 0.4532, 0.6094, 0.6113, 0.6372, 0.6531, 0.8975, 0.9173, 0.9443, 0.945]),
           st.sampled_from([0.227, 0.2717, 0.5228, 0.5557, 0.6299, 0.7519, 0.8587, 0.9104, 0.9424, 0.9655]),
           st.sampled_from([0.4475, 0.5423, 0.6433, 0.6521, 0.7131, 0.7474, 0.7843, 0.8674, 0.9662, 0.9945]),
           st.sampled_from([0.1746, 0.2908, 0.3309, 0.4865, 0.5027, 0.7215, 0.8499, 0.8543, 0.9252, 0.9819]),
           st.floats(min_value=0.99072, max_value=0.99257, exclude_min=True, allow_nan=False),
           st.sampled_from([0.4564, 0.4732, 0.6828, 0.6898, 0.7123, 0.8104, 0.8528, 0.863, 0.899, 0.9254]),
           st.sampled_from([0.2636, 0.3924, 0.4178, 0.4301, 0.5051, 0.6502, 0.7196, 0.7722, 0.7821, 0.9087]),
           st.sampled_from([0.1446, 0.2684, 0.2694, 0.295, 0.3825, 0.3857, 0.4302, 0.6457, 0.9513, 0.9657]),
           st.sampled_from([0.0877, 0.1164, 0.2908, 0.2945, 0.4219, 0.4463, 0.5069, 0.7305, 0.7995, 0.8549]),
           st.sampled_from([0.1534, 0.2212, 0.2308, 0.2525, 0.2948, 0.3115, 0.4187, 0.4903, 0.6705, 0.7927]),
           st.sampled_from([0.1566, 0.1906, 0.219, 0.2863, 0.3998, 0.4853, 0.495, 0.6092, 0.6901, 0.8681]),
           st.sampled_from([0.0516, 0.0928, 0.1641, 0.1906, 0.2896, 0.3518, 0.4469, 0.5248, 0.6755, 0.8083]),
           st.sampled_from([0.044, 0.0955, 0.1428, 0.1525, 0.2347, 0.2814, 0.2885, 0.376, 0.5437, 0.9212]),
           st.sampled_from([0.1188, 0.1249, 0.1772, 0.212, 0.2909, 0.3208, 0.3356, 0.3704, 0.4331, 0.8195]),
           st.sampled_from([0.0936, 0.1626, 0.1736, 0.2168, 0.2624, 0.3089, 0.3372, 0.339, 0.3641, 0.3813]),
           st.sampled_from([0.1029, 0.2236, 0.2452, 0.2654, 0.3107, 0.3215, 0.5716, 0.6281, 0.6295, 0.6788]),
           st.sampled_from([0.0427, 0.2736, 0.2945, 0.3006, 0.3228, 0.3494, 0.3743, 0.4124, 0.5196, 0.5259]),
           st.sampled_from([0.0572, 0.0576, 0.1322, 0.1921, 0.3009, 0.3408, 0.3603, 0.3717, 0.3724, 0.5988]),
           st.sampled_from([0.1591, 0.2033, 0.2076, 0.211, 0.2778, 0.301, 0.3342, 0.3492, 0.4527, 0.4808]),
           st.sampled_from([0.0308, 0.1177, 0.1206, 0.1238, 0.2521, 0.2596, 0.3459, 0.3795, 0.4201, 0.5251]),
           st.sampled_from([0.1339, 0.1548, 0.1694, 0.1927, 0.1963, 0.2229, 0.2231, 0.4494, 0.4726, 0.5663]),
           st.sampled_from([0.0492, 0.0589, 0.0684, 0.0945, 0.1319, 0.1577, 0.2017, 0.3263, 0.3517, 0.4894]),
           st.sampled_from([0.0138, 0.0307, 0.0581, 0.0779, 0.1294, 0.1423, 0.1545, 0.2525, 0.5123, 0.5777]),
           st.sampled_from([0.0434, 0.0523, 0.0672, 0.0701, 0.0951, 0.1013, 0.1258, 0.1344, 0.2241, 0.2526]),
           st.sampled_from([0.0359, 0.0772, 0.0946, 0.1069, 0.1082, 0.1102, 0.1321, 0.1558, 0.179, 0.2052]),
           st.sampled_from([0.0274, 0.0293, 0.0386, 0.0633, 0.0641, 0.0728, 0.0762, 0.0777, 0.0824, 0.1085]),
           st.sampled_from([0.0065, 0.0114, 0.0122, 0.0136, 0.0179, 0.0183, 0.0216, 0.0224, 0.0424, 0.0462]),
           st.sampled_from([0.0024, 0.0046, 0.0081, 0.0111, 0.0121, 0.0137, 0.0203, 0.0206, 0.0248, 0.0361]),
           st.sampled_from([0.0078, 0.0098, 0.0099, 0.0115, 0.012, 0.0153, 0.016, 0.0163, 0.0176, 0.0376]),
           st.sampled_from([0.0056, 0.0075, 0.0101, 0.0121, 0.0136, 0.0197, 0.021, 0.0213, 0.023, 0.0262]),
           st.sampled_from([0.0043, 0.0055, 0.0085, 0.0093, 0.01, 0.0126, 0.0144, 0.0257, 0.0303, 0.0309]),
           st.sampled_from([0.0013, 0.0032, 0.0043, 0.0049, 0.0057, 0.0087, 0.0109, 0.0133, 0.0281, 0.0376]),
           st.sampled_from([0.0016, 0.0023, 0.0041, 0.0049, 0.0073, 0.0087, 0.0124, 0.0132, 0.0249, 0.0394]),
           st.sampled_from([0.0013, 0.0022, 0.0055, 0.0057, 0.0062, 0.0092, 0.0106, 0.0116, 0.0121, 0.0171]),
           st.sampled_from([0.0036, 0.0054, 0.0062, 0.01, 0.0107, 0.0108, 0.0127, 0.0138, 0.0141, 0.0225]),
           st.sampled_from([0.0001, 0.0002, 0.0021, 0.0025, 0.0048, 0.0077, 0.0105, 0.0157, 0.0207, 0.021]),
           st.sampled_from([0.0006, 0.0018, 0.0031, 0.0052, 0.0054, 0.0074, 0.0078, 0.0079, 0.0124, 0.0129]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_6(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_6']['n_samples'] += 1
        self.data['tests']['test_6']['samples'].append(x_test)
        self.data['tests']['test_6']['y_expected'].append(y_expected[0])
        self.data['tests']['test_6']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0089, 0.0163, 0.018, 0.026, 0.0261, 0.0294, 0.0299, 0.0346, 0.0392, 0.1088]),
           st.sampled_from([0.0101, 0.0278, 0.0318, 0.0378, 0.0387, 0.0404, 0.0472, 0.0535, 0.0586, 0.1249]),
           st.sampled_from([0.015, 0.0202, 0.0257, 0.0274, 0.0408, 0.0474, 0.0592, 0.0833, 0.0866, 0.0926]),
           st.floats(min_value=0.05152, max_value=0.12649, exclude_min=True, allow_nan=False),
           st.sampled_from([0.023, 0.0255, 0.0444, 0.0519, 0.0822, 0.0936, 0.1026, 0.1217, 0.1284, 0.1313]),
           st.sampled_from([0.0116, 0.0349, 0.0481, 0.0545, 0.0735, 0.0849, 0.0958, 0.0973, 0.1513, 0.1538]),
           st.sampled_from([0.0956, 0.099, 0.1005, 0.1024, 0.111, 0.1232, 0.1349, 0.1458, 0.1577, 0.2555]),
           st.sampled_from([0.0828, 0.0852, 0.0907, 0.0989, 0.1071, 0.1394, 0.14, 0.1692, 0.2287, 0.4262]),
           st.floats(min_value=0.04617, max_value=0.05583, allow_nan=False),
           st.sampled_from([0.0351, 0.2028, 0.2048, 0.211, 0.2282, 0.2471, 0.3597, 0.5079, 0.6609, 0.7106]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.0904, 0.1787, 0.2325, 0.2783, 0.2935, 0.3094, 0.316, 0.4499, 0.5611, 0.5771]),
           st.sampled_from([0.0616, 0.1578, 0.1645, 0.1788, 0.3, 0.3055, 0.3141, 0.3275, 0.3341, 0.4622]),
           st.sampled_from([0.0983, 0.1253, 0.2067, 0.2689, 0.2904, 0.3297, 0.344, 0.3495, 0.3915, 0.7067]),
           st.sampled_from([0.0601, 0.0683, 0.1159, 0.2245, 0.2398, 0.334, 0.3575, 0.452, 0.4713, 0.8573]),
           st.sampled_from([0.1196, 0.1534, 0.1745, 0.2056, 0.2285, 0.4998, 0.5079, 0.6464, 0.8705, 0.9016]),
           st.sampled_from([0.1162, 0.1796, 0.2062, 0.2177, 0.2298, 0.2803, 0.5334, 0.685, 0.7071, 0.7236]),
           st.sampled_from([0.1316, 0.1859, 0.2222, 0.2586, 0.3709, 0.4519, 0.467, 0.7326, 0.7923, 0.813]),
           st.sampled_from([0.2427, 0.2745, 0.298, 0.3257, 0.339, 0.368, 0.5949, 0.6601, 0.7309, 0.9828]),
           st.sampled_from([0.2665, 0.3679, 0.4079, 0.5492, 0.6127, 0.7154, 0.7939, 0.8098, 0.8321, 0.8672]),
           st.sampled_from([0.1557, 0.1624, 0.3164, 0.3906, 0.489, 0.7616, 0.7702, 0.7999, 0.8804, 1.0]),
           st.sampled_from([0.1973, 0.3834, 0.4698, 0.5944, 0.6181, 0.6373, 0.7644, 0.8717, 0.9162, 0.9614]),
           st.sampled_from([0.3622, 0.4217, 0.4585, 0.5188, 0.7631, 0.8015, 0.8062, 0.9122, 0.9365, 0.9642]),
           st.sampled_from([0.4774, 0.5169, 0.5995, 0.6372, 0.6403, 0.6756, 0.7936, 0.8491, 0.945, 0.9757]),
           st.sampled_from([0.2086, 0.227, 0.3779, 0.5424, 0.6409, 0.6926, 0.7287, 0.7806, 0.9308, 0.9424]),
           st.sampled_from([0.3443, 0.4591, 0.467, 0.4946, 0.5763, 0.6141, 0.6318, 0.7256, 0.8321, 0.8494]),
           st.sampled_from([0.0481, 0.2234, 0.4355, 0.7207, 0.83, 0.8686, 0.8787, 0.8809, 0.883, 0.9911]),
           st.sampled_from([0.2649, 0.3269, 0.6957, 0.708, 0.906, 0.9076, 0.9315, 0.9349, 0.9582, 0.9745]),
           st.sampled_from([0.3777, 0.3856, 0.3869, 0.3907, 0.5793, 0.6563, 0.7171, 0.8881, 0.899, 0.9815]),
           st.sampled_from([0.1797, 0.3369, 0.3391, 0.3456, 0.5667, 0.6252, 0.6381, 0.6511, 0.9201, 1.0]),
           st.sampled_from([0.1025, 0.2767, 0.3138, 0.3203, 0.4264, 0.4505, 0.6083, 0.6108, 0.8069, 0.9308]),
           st.sampled_from([0.0994, 0.2533, 0.3035, 0.3169, 0.3339, 0.4612, 0.4674, 0.484, 0.5069, 0.689]),
           st.sampled_from([0.1698, 0.228, 0.2709, 0.2937, 0.3692, 0.3828, 0.4187, 0.4851, 0.7605, 1.0]),
           st.sampled_from([0.1437, 0.1566, 0.1969, 0.2755, 0.3409, 0.3998, 0.4441, 0.495, 0.5961, 0.6553]),
           st.sampled_from([0.1331, 0.182, 0.1866, 0.2131, 0.3093, 0.3638, 0.6378, 0.6705, 0.6983, 0.8621]),
           st.sampled_from([0.0317, 0.0561, 0.0801, 0.1588, 0.3578, 0.3762, 0.4619, 0.7109, 0.7563, 0.799]),
           st.sampled_from([0.058, 0.0969, 0.1271, 0.1309, 0.1772, 0.2824, 0.4118, 0.4331, 0.6938, 0.7536]),
           st.sampled_from([0.1436, 0.1438, 0.182, 0.2302, 0.2311, 0.3156, 0.3244, 0.4029, 0.4799, 0.487]),
           st.sampled_from([0.1439, 0.1666, 0.2241, 0.2736, 0.3605, 0.3765, 0.3803, 0.3927, 0.5993, 0.6028]),
           st.sampled_from([0.176, 0.2634, 0.2771, 0.3314, 0.3806, 0.4124, 0.4441, 0.5196, 0.5529, 0.6034]),
           st.sampled_from([0.0492, 0.0572, 0.0934, 0.1103, 0.1702, 0.2321, 0.2354, 0.2964, 0.3717, 0.5869]),
           st.sampled_from([0.1056, 0.1239, 0.1367, 0.1545, 0.1937, 0.2241, 0.2407, 0.2871, 0.3181, 0.4449]),
           st.sampled_from([0.0778, 0.1863, 0.1909, 0.2331, 0.2728, 0.3404, 0.4586, 0.4806, 0.5351, 0.6163]),
           st.sampled_from([0.0255, 0.0812, 0.0991, 0.11, 0.1359, 0.1721, 0.1824, 0.2092, 0.4557, 0.4777]),
           st.floats(min_value=0.12924, max_value=0.16154, allow_nan=False),
           st.sampled_from([0.0553, 0.0576, 0.1234, 0.1433, 0.1651, 0.1806, 0.2226, 0.347, 0.3639, 0.4232]),
           st.sampled_from([0.0434, 0.0655, 0.0775, 0.0805, 0.1521, 0.1554, 0.1789, 0.263, 0.2739, 0.3241]),
           st.sampled_from([0.0303, 0.0359, 0.0495, 0.0744, 0.085, 0.1114, 0.1255, 0.1806, 0.264, 0.2945]),
           st.sampled_from([0.0098, 0.0293, 0.0334, 0.0355, 0.0386, 0.049, 0.0496, 0.0596, 0.0783, 0.0884]),
           st.sampled_from([0.0086, 0.0124, 0.0136, 0.0142, 0.0177, 0.0193, 0.0201, 0.0272, 0.029, 0.0355]),
           st.sampled_from([0.0027, 0.0031, 0.0041, 0.0089, 0.0104, 0.014, 0.0181, 0.0208, 0.0299, 0.031]),
           st.sampled_from([0.0013, 0.0077, 0.0084, 0.0098, 0.0108, 0.0181, 0.0204, 0.0309, 0.0321, 0.0455]),
           st.sampled_from([0.005, 0.0062, 0.0065, 0.0067, 0.0093, 0.0097, 0.0126, 0.0197, 0.0199, 0.023]),
           st.sampled_from([0.0025, 0.0043, 0.0077, 0.01, 0.0176, 0.019, 0.0237, 0.0239, 0.029, 0.0352]),
           st.sampled_from([0.0019, 0.0025, 0.0039, 0.0045, 0.0074, 0.0103, 0.0129, 0.0166, 0.0172, 0.0372]),
           st.sampled_from([0.0012, 0.0048, 0.0063, 0.0072, 0.0114, 0.0117, 0.0119, 0.0125, 0.0152, 0.0394]),
           st.sampled_from([0.0015, 0.002, 0.0032, 0.0034, 0.005, 0.0103, 0.0109, 0.0132, 0.0177, 0.0242]),
           st.sampled_from([0.0039, 0.0073, 0.0108, 0.0113, 0.0114, 0.0115, 0.0127, 0.0131, 0.0224, 0.044]),
           st.sampled_from([0.0024, 0.0028, 0.0029, 0.0034, 0.0036, 0.0077, 0.0082, 0.016, 0.0178, 0.0332]),
           st.sampled_from([0.0006, 0.0015, 0.0019, 0.0021, 0.0056, 0.0085, 0.0101, 0.0106, 0.0143, 0.0156]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_7(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_7']['n_samples'] += 1
        self.data['tests']['test_7']['samples'].append(x_test)
        self.data['tests']['test_7']['y_expected'].append(y_expected[0])
        self.data['tests']['test_7']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0108, 0.0125, 0.013, 0.019, 0.0192, 0.0286, 0.0408, 0.0409, 0.0453, 0.0664]),
           st.sampled_from([0.0006, 0.0045, 0.0122, 0.0149, 0.0171, 0.0192, 0.0221, 0.032, 0.034, 0.0523]),
           st.sampled_from([0.0135, 0.0188, 0.0254, 0.0326, 0.0347, 0.0423, 0.0481, 0.0484, 0.0507, 0.1636]),
           st.floats(min_value=0.05152, max_value=0.12649, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0121, 0.018, 0.0197, 0.0215, 0.026, 0.0455, 0.0547, 0.061, 0.0737, 0.0794]),
           st.sampled_from([0.0102, 0.0201, 0.0249, 0.0546, 0.0771, 0.1009, 0.1019, 0.1077, 0.1172, 0.1589]),
           st.sampled_from([0.0396, 0.0609, 0.0731, 0.0857, 0.0895, 0.0901, 0.097, 0.145, 0.1664, 0.2304]),
           st.sampled_from([0.0219, 0.0343, 0.0535, 0.0651, 0.0674, 0.0883, 0.0906, 0.1024, 0.1188, 0.2385]),
           st.floats(min_value=0.05586, max_value=0.18124, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0475, 0.0568, 0.0751, 0.0767, 0.0802, 0.0866, 0.0888, 0.1483, 0.1777, 0.2176]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.0273, 0.0906, 0.1179, 0.1245, 0.1412, 0.1554, 0.1582, 0.1862, 0.206, 0.3473]),
           st.sampled_from([0.0252, 0.0618, 0.0644, 0.1119, 0.1507, 0.1531, 0.1541, 0.1542, 0.1975, 0.4256]),
           st.sampled_from([0.0593, 0.0853, 0.1035, 0.1174, 0.1345, 0.1524, 0.2988, 0.3046, 0.4012, 0.484]),
           st.sampled_from([0.0456, 0.0662, 0.0832, 0.224, 0.2603, 0.2616, 0.2901, 0.3769, 0.5223, 0.6812]),
           st.sampled_from([0.089, 0.1133, 0.1227, 0.1563, 0.1985, 0.2273, 0.2978, 0.3463, 0.5326, 0.657]),
           st.sampled_from([0.1424, 0.1699, 0.1956, 0.2299, 0.236, 0.2676, 0.683, 0.7327, 0.8669, 1.0]),
           st.sampled_from([0.1199, 0.1442, 0.2127, 0.3657, 0.416, 0.4262, 0.5364, 0.6122, 0.7051, 1.0]),
           st.sampled_from([0.2373, 0.2493, 0.3279, 0.42, 0.7708, 0.7988, 0.8345, 0.851, 0.9407, 0.9843]),
           st.sampled_from([0.1136, 0.1734, 0.2086, 0.2721, 0.3501, 0.3658, 0.3907, 0.4024, 0.4128, 1.0]),
           st.sampled_from([0.3598, 0.3825, 0.4084, 0.4978, 0.5605, 0.6275, 0.8142, 0.8297, 0.8631, 0.9857]),
           st.sampled_from([0.1571, 0.1994, 0.261, 0.4292, 0.5265, 0.6362, 0.7545, 0.846, 0.8707, 0.9814]),
           st.sampled_from([0.2082, 0.2085, 0.3368, 0.354, 0.6414, 0.6696, 0.6774, 0.7483, 0.887, 0.9146]),
           st.sampled_from([0.2827, 0.5675, 0.5707, 0.5906, 0.6168, 0.7361, 0.7577, 0.8966, 0.9601, 0.9719]),
           st.sampled_from([0.3178, 0.325, 0.6776, 0.6993, 0.7973, 0.8099, 0.842, 0.8675, 0.8677, 0.9048]),
           st.sampled_from([0.5647, 0.6042, 0.6415, 0.7115, 0.7152, 0.7511, 0.7529, 0.8223, 0.8989, 0.9942]),
           st.sampled_from([0.4375, 0.4967, 0.6563, 0.6997, 0.7049, 0.7772, 0.7901, 0.8553, 0.8846, 0.8872]),
           st.sampled_from([0.0832, 0.3788, 0.5816, 0.681, 0.7633, 0.8564, 0.8673, 0.905, 0.9092, 0.9785]),
           st.sampled_from([0.3411, 0.4421, 0.5206, 0.6289, 0.679, 0.7124, 0.7309, 0.797, 0.8073, 0.8725]),
           st.sampled_from([0.0613, 0.235, 0.4437, 0.4877, 0.6107, 0.6281, 0.7128, 0.7474, 0.8014, 0.9621]),
           st.sampled_from([0.2787, 0.3851, 0.5517, 0.554, 0.5619, 0.583, 0.5893, 0.6005, 0.7449, 0.8512]),
           st.sampled_from([0.1235, 0.24, 0.2576, 0.341, 0.4577, 0.5045, 0.5373, 0.5624, 0.5989, 0.67]),
           st.sampled_from([0.1709, 0.2025, 0.2881, 0.333, 0.3381, 0.5121, 0.6308, 0.6545, 0.6715, 0.675]),
           st.sampled_from([0.1107, 0.2351, 0.2709, 0.2847, 0.3992, 0.6963, 0.761, 0.8697, 0.8741, 0.9039]),
           st.sampled_from([0.1171, 0.1982, 0.2908, 0.3044, 0.3609, 0.3915, 0.5305, 0.5531, 0.5725, 0.7402]),
           st.sampled_from([0.0352, 0.0899, 0.1108, 0.4572, 0.4787, 0.5122, 0.586, 0.665, 0.9605, 0.9922]),
           st.sampled_from([0.1192, 0.263, 0.3446, 0.4027, 0.4561, 0.4577, 0.4681, 0.5025, 0.6423, 0.8912]),
           st.sampled_from([0.0461, 0.1057, 0.1096, 0.2446, 0.2726, 0.3742, 0.4401, 0.4899, 0.5242, 0.6313]),
           st.sampled_from([0.0407, 0.0528, 0.1252, 0.1681, 0.2139, 0.3439, 0.4603, 0.5375, 0.5872, 0.6697]),
           st.sampled_from([0.1131, 0.1193, 0.188, 0.3151, 0.3244, 0.348, 0.446, 0.4947, 0.6326, 0.6663]),
           st.sampled_from([0.1043, 0.1088, 0.1151, 0.1264, 0.1552, 0.1659, 0.2241, 0.2478, 0.4482, 0.8995]),
           st.sampled_from([0.0431, 0.0511, 0.0836, 0.0933, 0.1421, 0.1791, 0.2268, 0.2522, 0.4105, 0.5147]),
           st.sampled_from([0.0516, 0.0716, 0.107, 0.1713, 0.2203, 0.238, 0.2552, 0.2996, 0.3054, 0.4216]),
           st.sampled_from([0.0486, 0.0815, 0.1268, 0.1269, 0.1381, 0.1657, 0.1696, 0.1778, 0.1955, 0.2222]),
           st.floats(min_value=0.12924, max_value=0.16154, allow_nan=False),
           st.sampled_from([0.0, 0.0203, 0.0505, 0.057, 0.058, 0.0729, 0.1044, 0.1124, 0.1271, 0.191]),
           st.sampled_from([0.0, 0.0073, 0.0205, 0.0365, 0.0426, 0.0562, 0.0749, 0.1096, 0.119, 0.1344]),
           st.sampled_from([0.0152, 0.0273, 0.03, 0.0404, 0.0534, 0.0716, 0.1047, 0.1164, 0.1343, 0.1859]),
           st.sampled_from([0.0073, 0.0101, 0.0106, 0.0265, 0.0367, 0.0412, 0.049, 0.0567, 0.0681, 0.1366]),
           st.sampled_from([0.0035, 0.0064, 0.0068, 0.0093, 0.0108, 0.0142, 0.0143, 0.0196, 0.0318, 0.0637]),
           st.sampled_from([0.0, 0.0015, 0.0018, 0.0019, 0.0091, 0.0092, 0.0107, 0.0113, 0.0128, 0.0156]),
           st.sampled_from([0.0025, 0.0034, 0.0035, 0.0048, 0.0077, 0.011, 0.0118, 0.015, 0.0172, 0.0236]),
           st.sampled_from([0.0022, 0.0028, 0.0035, 0.0048, 0.0052, 0.0077, 0.0111, 0.012, 0.0122, 0.0191]),
           st.sampled_from([0.0045, 0.0083, 0.0084, 0.0109, 0.013, 0.0131, 0.0135, 0.0154, 0.0159, 0.0271]),
           st.sampled_from([0.0016, 0.0026, 0.004, 0.0045, 0.0068, 0.0079, 0.0087, 0.0131, 0.0203, 0.0233]),
           st.sampled_from([0.0015, 0.0021, 0.0045, 0.0046, 0.0048, 0.0056, 0.0058, 0.0065, 0.0072, 0.0137]),
           st.sampled_from([0.0085, 0.0089, 0.0092, 0.0096, 0.0104, 0.0114, 0.0137, 0.0158, 0.0181, 0.0217]),
           st.sampled_from([0.0008, 0.0035, 0.0036, 0.0041, 0.0064, 0.0081, 0.0082, 0.0084, 0.0122, 0.0164]),
           st.sampled_from([0.0013, 0.0021, 0.0028, 0.0036, 0.0069, 0.007, 0.0093, 0.0117, 0.0139, 0.022]),
           st.sampled_from([0.0017, 0.0023, 0.004, 0.0054, 0.0062, 0.0094, 0.0102, 0.0105, 0.0138, 0.018]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_8(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_8']['n_samples'] += 1
        self.data['tests']['test_8']['samples'].append(x_test)
        self.data['tests']['test_8']['y_expected'].append(y_expected[0])
        self.data['tests']['test_8']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.013, 0.0158, 0.0164, 0.0269, 0.0299, 0.0307, 0.0363, 0.0411, 0.0522, 0.1083]),
           st.sampled_from([0.0128, 0.0165, 0.0201, 0.0277, 0.0278, 0.0318, 0.0346, 0.0383, 0.1065, 0.1249]),
           st.sampled_from([0.0103, 0.0214, 0.0267, 0.0269, 0.0341, 0.0411, 0.0447, 0.0498, 0.0653, 0.0688]),
           st.floats(min_value=0.05152, max_value=0.12649, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0076, 0.062, 0.0635, 0.0645, 0.0646, 0.0724, 0.0752, 0.0964, 0.1776, 0.2252]),
           st.sampled_from([0.0744, 0.0787, 0.0865, 0.0887, 0.1146, 0.1256, 0.1416, 0.1428, 0.1538, 0.168]),
           st.sampled_from([0.0279, 0.0374, 0.0706, 0.0832, 0.0958, 0.1577, 0.1606, 0.1626, 0.2217, 0.3016]),
           st.sampled_from([0.0805, 0.0929, 0.0997, 0.1323, 0.1402, 0.1607, 0.169, 0.1692, 0.1902, 0.1927]),
           st.sampled_from([0.1168, 0.135, 0.1357, 0.1553, 0.163, 0.1894, 0.2017, 0.296, 0.3048, 0.5664]),
           st.sampled_from([0.0874, 0.1334, 0.1779, 0.211, 0.2461, 0.2684, 0.2822, 0.2918, 0.3914, 0.5079]),
           st.floats(min_value=0.16413, max_value=0.19793, allow_nan=False),
           st.sampled_from([0.1734, 0.1787, 0.199, 0.2484, 0.2933, 0.31, 0.4992, 0.5148, 0.5341, 0.5611]),
           st.sampled_from([0.1023, 0.2126, 0.2284, 0.2301, 0.2523, 0.2686, 0.2796, 0.4012, 0.5554, 0.7022]),
           st.sampled_from([0.161, 0.1806, 0.1887, 0.1893, 0.2179, 0.2587, 0.2829, 0.3672, 0.3915, 0.4753]),
           st.sampled_from([0.0673, 0.0775, 0.127, 0.1302, 0.204, 0.2245, 0.352, 0.3819, 0.4515, 0.595]),
           st.sampled_from([0.1503, 0.1745, 0.2764, 0.3828, 0.3889, 0.502, 0.5312, 0.5335, 0.5595, 0.6573]),
           st.sampled_from([0.1901, 0.2143, 0.2297, 0.3635, 0.3975, 0.4221, 0.4274, 0.4386, 0.4639, 0.5486]),
           st.sampled_from([0.1755, 0.1884, 0.2339, 0.2429, 0.2613, 0.3175, 0.3545, 0.7923, 0.8045, 0.8476]),
           st.sampled_from([0.1228, 0.2408, 0.2427, 0.5325, 0.6223, 0.647, 0.7917, 0.8782, 0.8789, 0.969]),
           st.sampled_from([0.3107, 0.3508, 0.3926, 0.5356, 0.6153, 0.6997, 0.7154, 0.7264, 0.9188, 0.9399]),
           st.sampled_from([0.2604, 0.5685, 0.576, 0.6508, 0.6753, 0.6802, 0.6918, 0.7084, 0.7352, 0.7702]),
           st.sampled_from([0.468, 0.5418, 0.789, 0.7974, 0.7983, 0.8147, 0.8369, 0.8717, 0.878, 0.9972]),
           st.sampled_from([0.361, 0.3622, 0.4333, 0.5703, 0.5875, 0.7078, 0.8385, 0.8697, 0.9311, 0.9532]),
           st.sampled_from([0.528, 0.6372, 0.6805, 0.7384, 0.8479, 0.8512, 0.8604, 0.8837, 0.9236, 0.9607]),
           st.sampled_from([0.4106, 0.6577, 0.6926, 0.7287, 0.7745, 0.8496, 0.881, 0.9138, 0.9327, 0.9498]),
           st.sampled_from([0.1543, 0.2279, 0.4082, 0.7131, 0.7367, 0.8045, 0.8614, 0.8912, 0.9395, 0.9801]),
           st.sampled_from([0.2908, 0.4355, 0.5707, 0.6055, 0.6255, 0.6502, 0.9021, 0.9448, 0.9474, 0.9819]),
           st.sampled_from([0.4636, 0.6957, 0.6988, 0.8077, 0.8664, 0.9315, 0.9649, 0.982, 0.9955, 0.9957]),
           st.sampled_from([0.4399, 0.4964, 0.7649, 0.8446, 0.8519, 0.8722, 0.8793, 0.8888, 0.8962, 0.9036]),
           st.sampled_from([0.5213, 0.5215, 0.5371, 0.6151, 0.6316, 0.6482, 0.6579, 0.7141, 0.7196, 0.8892]),
           st.sampled_from([0.2936, 0.3139, 0.3349, 0.4079, 0.4326, 0.4335, 0.5101, 0.6655, 0.8787, 0.9657]),
           st.sampled_from([0.1711, 0.3169, 0.3339, 0.4056, 0.4192, 0.4241, 0.4355, 0.4855, 0.5443, 0.8549]),
           st.sampled_from([0.1448, 0.2525, 0.2835, 0.2885, 0.2997, 0.4661, 0.4715, 0.5977, 0.6824, 0.718]),
           st.sampled_from([0.0212, 0.0927, 0.0969, 0.1845, 0.2196, 0.2398, 0.2618, 0.2894, 0.3791, 0.6627]),
           st.sampled_from([0.0864, 0.1019, 0.1229, 0.1588, 0.1847, 0.3674, 0.3862, 0.5046, 0.6172, 0.731]),
           st.sampled_from([0.0561, 0.1041, 0.1394, 0.1519, 0.4134, 0.6629, 0.7174, 0.739, 0.8209, 0.9361]),
           st.sampled_from([0.0702, 0.1066, 0.1188, 0.1234, 0.1302, 0.22, 0.4072, 0.4234, 0.4516, 0.7337]),
           st.sampled_from([0.0907, 0.1748, 0.182, 0.2624, 0.3156, 0.3244, 0.3314, 0.3813, 0.6496, 0.8148]),
           st.sampled_from([0.1523, 0.1667, 0.1878, 0.2736, 0.2829, 0.3215, 0.3893, 0.3927, 0.4572, 0.5774]),
           st.sampled_from([0.0325, 0.1043, 0.1103, 0.2046, 0.2634, 0.2715, 0.3521, 0.3738, 0.4436, 0.4441]),
           st.sampled_from([0.1674, 0.2144, 0.2762, 0.3051, 0.3074, 0.3363, 0.4433, 0.5046, 0.5886, 0.6202]),
           st.sampled_from([0.1329, 0.1395, 0.1901, 0.2339, 0.301, 0.4392, 0.4463, 0.4512, 0.4697, 0.7179]),
           st.sampled_from([0.0638, 0.1206, 0.1552, 0.1984, 0.224, 0.2563, 0.298, 0.3178, 0.4335, 0.4911]),
           st.sampled_from([0.137, 0.1779, 0.1963, 0.203, 0.2802, 0.3202, 0.4016, 0.4491, 0.4542, 0.5379]),
           st.floats(min_value=0.16157, max_value=0.26993, exclude_min=True, allow_nan=False),
           st.sampled_from([0.008, 0.0129, 0.0417, 0.1146, 0.1177, 0.1199, 0.1457, 0.2012, 0.3097, 0.4442]),
           st.sampled_from([0.0476, 0.0495, 0.0618, 0.0674, 0.0882, 0.1052, 0.1688, 0.1716, 0.184, 0.3016]),
           st.sampled_from([0.0052, 0.0785, 0.0812, 0.09, 0.0921, 0.1102, 0.121, 0.1283, 0.1341, 0.1499]),
           st.sampled_from([0.0187, 0.0244, 0.0289, 0.0369, 0.0511, 0.06, 0.0636, 0.0767, 0.0941, 0.1299]),
           st.sampled_from([0.0044, 0.0155, 0.0183, 0.0199, 0.0209, 0.0238, 0.0241, 0.0374, 0.0469, 0.0493]),
           st.sampled_from([0.0024, 0.0027, 0.0028, 0.0039, 0.0118, 0.0169, 0.0193, 0.0202, 0.0299, 0.0302]),
           st.sampled_from([0.0027, 0.0033, 0.0073, 0.0117, 0.0132, 0.0167, 0.0214, 0.0221, 0.0339, 0.0444]),
           st.sampled_from([0.0019, 0.0036, 0.0039, 0.0049, 0.0126, 0.0135, 0.0151, 0.0156, 0.0197, 0.0361]),
           st.sampled_from([0.0043, 0.0044, 0.007, 0.0088, 0.0114, 0.0137, 0.016, 0.0161, 0.019, 0.0227]),
           st.sampled_from([0.0028, 0.0031, 0.0032, 0.0034, 0.006, 0.0099, 0.0111, 0.0133, 0.0164, 0.019]),
           st.sampled_from([0.0038, 0.0053, 0.0063, 0.0064, 0.0089, 0.0097, 0.0099, 0.0102, 0.0174, 0.0187]),
           st.sampled_from([0.0025, 0.0029, 0.0056, 0.0065, 0.0084, 0.0092, 0.0117, 0.0127, 0.0133, 0.0203]),
           st.sampled_from([0.003, 0.005, 0.0066, 0.009, 0.0103, 0.0105, 0.0114, 0.0138, 0.0155, 0.0214]),
           st.sampled_from([0.0025, 0.0045, 0.0048, 0.0062, 0.0081, 0.0154, 0.016, 0.0178, 0.0207, 0.021]),
           st.sampled_from([0.0006, 0.0014, 0.0016, 0.0024, 0.0035, 0.0036, 0.0074, 0.0086, 0.0099, 0.0156]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_9(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_9']['n_samples'] += 1
        self.data['tests']['test_9']['samples'].append(x_test)
        self.data['tests']['test_9']['y_expected'].append(y_expected[0])
        self.data['tests']['test_9']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0091, 0.0108, 0.0123, 0.0188, 0.0202, 0.0211, 0.0217, 0.0223, 0.0262, 0.0378]),
           st.sampled_from([0.0019, 0.0026, 0.0103, 0.0149, 0.0291, 0.0309, 0.032, 0.0447, 0.0484, 0.0644]),
           st.sampled_from([0.0056, 0.0152, 0.0196, 0.0291, 0.0324, 0.0466, 0.0476, 0.0513, 0.0533, 0.0953]),
           st.floats(min_value=0.05643, max_value=0.06908, allow_nan=False),
           st.sampled_from([0.0215, 0.0217, 0.026, 0.0305, 0.0436, 0.0657, 0.0794, 0.1158, 0.1183, 0.2565]),
           st.sampled_from([0.0201, 0.0368, 0.0771, 0.0795, 0.086, 0.0887, 0.1172, 0.1185, 0.1817, 0.307]),
           st.sampled_from([0.0182, 0.0541, 0.0659, 0.0771, 0.0857, 0.0931, 0.1027, 0.1054, 0.138, 0.1539]),
           st.sampled_from([0.0098, 0.0219, 0.044, 0.0494, 0.0687, 0.0741, 0.1451, 0.1454, 0.2033, 0.2362]),
           st.sampled_from([0.0487, 0.0791, 0.084, 0.1147, 0.1235, 0.1252, 0.1384, 0.1523, 0.1873, 0.3337]),
           st.sampled_from([0.0349, 0.0767, 0.088, 0.1045, 0.1185, 0.124, 0.1753, 0.1882, 0.2176, 0.2475]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0269, 0.0837, 0.0942, 0.0946, 0.0948, 0.1207, 0.1554, 0.206, 0.2375, 0.371]),
           st.sampled_from([0.0309, 0.089, 0.1254, 0.1531, 0.1705, 0.2249, 0.2432, 0.3299, 0.3973, 0.5582]),
           st.sampled_from([0.0853, 0.1174, 0.1179, 0.1194, 0.1984, 0.214, 0.2722, 0.2793, 0.3257, 0.5078]),
           st.sampled_from([0.0346, 0.0456, 0.1994, 0.2169, 0.224, 0.2333, 0.3769, 0.7464, 0.7943, 1.0]),
           st.floats(min_value=0.53648, max_value=0.66654, allow_nan=False),
           st.sampled_from([0.2048, 0.207, 0.2241, 0.2468, 0.6795, 0.7066, 0.7327, 0.7906, 0.9522, 0.9739]),
           st.sampled_from([0.1299, 0.1429, 0.2349, 0.3417, 0.3818, 0.5632, 0.6432, 0.7051, 0.8807, 0.9278]),
           st.sampled_from([0.1455, 0.1661, 0.2024, 0.3812, 0.3819, 0.3924, 0.4348, 0.4509, 0.7401, 0.8024]),
           st.sampled_from([0.1104, 0.2964, 0.3005, 0.4678, 0.4691, 0.491, 0.8129, 0.8196, 0.8619, 0.8701]),
           st.sampled_from([0.1268, 0.2146, 0.2493, 0.4865, 0.5328, 0.5402, 0.5911, 0.5958, 0.7473, 0.8297]),
           st.sampled_from([0.1975, 0.238, 0.2816, 0.3489, 0.3985, 0.5573, 0.6115, 0.6362, 0.7146, 0.8217]),
           st.sampled_from([0.3361, 0.3776, 0.6308, 0.6313, 0.6634, 0.6712, 0.6774, 0.7484, 0.8643, 0.887]),
           st.sampled_from([0.2282, 0.2827, 0.5399, 0.5956, 0.5973, 0.6443, 0.7577, 0.9165, 0.9432, 1.0]),
           st.sampled_from([0.2043, 0.3178, 0.4106, 0.4122, 0.4466, 0.5973, 0.6217, 0.7613, 0.7781, 0.8504]),
           st.sampled_from([0.257, 0.3241, 0.7092, 0.7115, 0.7755, 0.7876, 0.8458, 0.8582, 0.9667, 0.9724]),
           st.sampled_from([0.2771, 0.6024, 0.6563, 0.6632, 0.6971, 0.6997, 0.8846, 0.8872, 0.9675, 0.9823]),
           st.sampled_from([0.2767, 0.2989, 0.681, 0.7317, 0.7321, 0.8457, 0.8555, 0.8907, 0.9134, 0.9228]),
           st.sampled_from([0.3474, 0.4421, 0.4667, 0.4772, 0.4992, 0.5047, 0.699, 0.8073, 0.8387, 0.9631]),
           st.sampled_from([0.3925, 0.4437, 0.4877, 0.6295, 0.7152, 0.7679, 0.8463, 0.866, 0.9221, 1.0]),
           st.sampled_from([0.2005, 0.3788, 0.3791, 0.3851, 0.4727, 0.4754, 0.4929, 0.5753, 0.5811, 0.7449]),
           st.sampled_from([0.102, 0.1921, 0.4935, 0.4983, 0.4989, 0.5376, 0.6312, 0.6354, 0.6962, 0.7575]),
           st.sampled_from([0.1709, 0.2227, 0.2897, 0.3101, 0.3969, 0.4629, 0.6591, 0.6601, 0.675, 0.8108]),
           st.floats(min_value=0.55795, max_value=0.69213, allow_nan=False),
           st.sampled_from([0.2467, 0.2495, 0.2586, 0.2969, 0.3504, 0.4232, 0.556, 0.6239, 0.8529, 0.8647]),
           st.sampled_from([0.105, 0.1108, 0.1725, 0.2297, 0.2561, 0.5271, 0.5564, 0.665, 0.718, 0.9922]),
           st.sampled_from([0.1336, 0.2216, 0.237, 0.2463, 0.3835, 0.4897, 0.6116, 0.7766, 0.8459, 0.9123]),
           st.sampled_from([0.0383, 0.0603, 0.1358, 0.1587, 0.1589, 0.2871, 0.3101, 0.5733, 0.6097, 1.0]),
           st.sampled_from([0.0999, 0.1694, 0.1847, 0.2139, 0.2309, 0.2474, 0.3439, 0.394, 0.6697, 0.9857]),
           st.sampled_from([0.1062, 0.1444, 0.1651, 0.197, 0.222, 0.5003, 0.5018, 0.6003, 0.6114, 0.672]),
           st.sampled_from([0.1043, 0.117, 0.1967, 0.1979, 0.1994, 0.2649, 0.2917, 0.3548, 0.4482, 0.6121]),
           st.sampled_from([0.0511, 0.0653, 0.1041, 0.1466, 0.1883, 0.2054, 0.2714, 0.2873, 0.5006, 0.5147]),
           st.sampled_from([0.0716, 0.149, 0.1625, 0.1733, 0.1882, 0.2121, 0.2275, 0.2816, 0.3054, 0.4382]),
           st.sampled_from([0.0845, 0.1148, 0.1268, 0.1437, 0.1651, 0.1696, 0.1801, 0.1803, 0.2222, 0.4087]),
           st.sampled_from([0.0536, 0.0931, 0.1125, 0.1136, 0.1192, 0.1467, 0.1586, 0.1651, 0.2307, 0.3017]),
           st.sampled_from([0.0176, 0.0522, 0.0681, 0.0779, 0.0965, 0.1124, 0.1136, 0.157, 0.1946, 0.3424]),
           st.sampled_from([0.0, 0.0179, 0.0479, 0.0567, 0.0838, 0.1051, 0.1211, 0.1634, 0.1874, 0.3096]),
           st.sampled_from([0.0085, 0.0244, 0.029, 0.03, 0.0309, 0.0407, 0.0693, 0.1074, 0.1297, 0.1792]),
           st.sampled_from([0.0073, 0.0085, 0.0101, 0.0119, 0.0344, 0.0412, 0.0589, 0.0681, 0.0719, 0.1022]),
           st.sampled_from([0.0067, 0.0088, 0.0093, 0.011, 0.0116, 0.012, 0.0133, 0.0154, 0.0162, 0.0258]),
           st.sampled_from([0.0019, 0.0053, 0.0058, 0.0076, 0.0079, 0.0082, 0.0107, 0.0108, 0.0121, 0.0309]),
           st.floats(min_value=0.00328, max_value=0.00389, allow_nan=False),
           st.sampled_from([0.0032, 0.0037, 0.0063, 0.0067, 0.0095, 0.0127, 0.0147, 0.0151, 0.016, 0.0248]),
           st.sampled_from([0.0022, 0.0024, 0.003, 0.0035, 0.0044, 0.0045, 0.0067, 0.0071, 0.0074, 0.0179]),
           st.sampled_from([0.0022, 0.0035, 0.0042, 0.0051, 0.012, 0.0121, 0.0126, 0.018, 0.019, 0.0212]),
           st.sampled_from([0.0048, 0.0049, 0.0056, 0.0065, 0.0078, 0.0094, 0.0138, 0.0139, 0.0152, 0.0198]),
           st.sampled_from([0.0024, 0.0034, 0.0042, 0.0047, 0.007, 0.0099, 0.0114, 0.0137, 0.0138, 0.0143]),
           st.sampled_from([0.0008, 0.0018, 0.0023, 0.0024, 0.0027, 0.0043, 0.005, 0.0096, 0.0122, 0.014]),
           st.sampled_from([0.0013, 0.0056, 0.0066, 0.0068, 0.0069, 0.0073, 0.0089, 0.009, 0.011, 0.0294]),
           st.sampled_from([0.002, 0.0033, 0.0039, 0.004, 0.0051, 0.0056, 0.0058, 0.0063, 0.0088, 0.011]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_10(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_10']['n_samples'] += 1
        self.data['tests']['test_10']['samples'].append(x_test)
        self.data['tests']['test_10']['y_expected'].append(y_expected[0])
        self.data['tests']['test_10']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0056, 0.0163, 0.0269, 0.027, 0.0315, 0.0428, 0.0443, 0.0516, 0.0526, 0.0731]),
           st.sampled_from([0.0017, 0.0333, 0.042, 0.0444, 0.0563, 0.0599, 0.0649, 0.0709, 0.0944, 0.2339]),
           st.sampled_from([0.008, 0.0178, 0.0221, 0.0433, 0.0488, 0.0688, 0.0866, 0.1268, 0.1447, 0.1665]),
           st.floats(min_value=0.06911, max_value=0.14056, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0232, 0.0419, 0.0484, 0.0646, 0.0752, 0.0784, 0.0822, 0.0988, 0.1615, 0.1693]),
           st.sampled_from([0.0443, 0.0779, 0.0871, 0.1022, 0.1048, 0.1207, 0.1256, 0.1416, 0.1513, 0.18]),
           st.sampled_from([0.0918, 0.0938, 0.1201, 0.1458, 0.1487, 0.1577, 0.1776, 0.1916, 0.3016, 0.3322]),
           st.sampled_from([0.0055, 0.0439, 0.078, 0.0907, 0.0991, 0.1388, 0.143, 0.1484, 0.1513, 0.2057]),
           st.sampled_from([0.1168, 0.1357, 0.1408, 0.146, 0.1618, 0.1723, 0.2017, 0.2535, 0.261, 0.296]),
           st.sampled_from([0.0874, 0.1247, 0.1375, 0.2119, 0.2245, 0.2471, 0.2558, 0.3193, 0.4372, 0.6609]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.152, 0.1556, 0.2621, 0.2671, 0.3037, 0.3108, 0.3425, 0.3431, 0.3669, 0.5364]),
           st.sampled_from([0.2456, 0.2655, 0.2703, 0.2934, 0.2947, 0.3309, 0.4393, 0.4574, 0.5175, 0.5237]),
           st.sampled_from([0.0336, 0.1253, 0.1727, 0.1806, 0.1965, 0.1968, 0.357, 0.3709, 0.3769, 0.569]),
           st.sampled_from([0.0092, 0.0601, 0.1165, 0.1302, 0.1886, 0.198, 0.2102, 0.2869, 0.295, 0.438]),
           st.floats(min_value=0.53648, max_value=0.66654, allow_nan=False),
           st.sampled_from([0.2086, 0.2088, 0.216, 0.2282, 0.2825, 0.5386, 0.5486, 0.618, 0.636, 0.6613]),
           st.sampled_from([0.0849, 0.2093, 0.31, 0.3175, 0.3345, 0.5441, 0.6876, 0.7825, 0.8006, 0.8025]),
           st.sampled_from([0.1908, 0.2344, 0.2784, 0.3219, 0.3568, 0.4062, 0.5418, 0.6041, 0.7602, 0.969]),
           st.sampled_from([0.126, 0.174, 0.2395, 0.3404, 0.3508, 0.3926, 0.726, 0.7832, 0.7932, 0.9007]),
           st.sampled_from([0.0625, 0.2243, 0.3504, 0.6663, 0.7156, 0.742, 0.765, 0.8147, 0.8941, 0.9144]),
           st.sampled_from([0.1241, 0.2143, 0.2381, 0.4076, 0.5231, 0.6181, 0.6879, 0.7924, 0.8045, 0.8103]),
           st.sampled_from([0.3097, 0.3239, 0.3622, 0.4337, 0.4379, 0.4824, 0.76, 0.8302, 0.8899, 0.8969]),
           st.sampled_from([0.0239, 0.1604, 0.3202, 0.5169, 0.5426, 0.6292, 0.6372, 0.7786, 0.9781, 0.9893]),
           st.sampled_from([0.5091, 0.6695, 0.7115, 0.7287, 0.7812, 0.9074, 0.9357, 0.9655, 0.9716, 0.9865]),
           st.sampled_from([0.2279, 0.2796, 0.329, 0.5308, 0.6433, 0.7053, 0.7131, 0.8084, 0.8814, 0.9836]),
           st.sampled_from([0.2211, 0.3654, 0.581, 0.6255, 0.6534, 0.7207, 0.8334, 0.8847, 0.9702, 0.9974]),
           st.sampled_from([0.1911, 0.3036, 0.6988, 0.708, 0.736, 0.7544, 0.938, 0.9739, 0.9816, 0.982]),
           st.sampled_from([0.1008, 0.4146, 0.4239, 0.5793, 0.7068, 0.7726, 0.8881, 0.9348, 0.9815, 1.0]),
           st.sampled_from([0.2554, 0.4301, 0.602, 0.6069, 0.6074, 0.6345, 0.6502, 0.6925, 0.7022, 0.8542]),
           st.sampled_from([0.1446, 0.1969, 0.3138, 0.3772, 0.5342, 0.5651, 0.5967, 0.8069, 0.9308, 0.9513]),
           st.sampled_from([0.2339, 0.3615, 0.4355, 0.484, 0.4961, 0.5558, 0.5749, 0.7446, 0.7912, 0.7995]),
           st.sampled_from([0.0846, 0.1095, 0.16, 0.3118, 0.4851, 0.4903, 0.5756, 0.7204, 0.7927, 1.0]),
           st.floats(min_value=0.55795, max_value=0.69213, allow_nan=False),
           st.sampled_from([0.1406, 0.1588, 0.1847, 0.1848, 0.1866, 0.194, 0.2223, 0.2551, 0.7505, 0.8626]),
           st.sampled_from([0.0317, 0.0998, 0.1344, 0.1956, 0.2148, 0.2803, 0.2814, 0.4219, 0.4694, 0.6879]),
           st.sampled_from([0.1309, 0.157, 0.1644, 0.1681, 0.1781, 0.1834, 0.1869, 0.201, 0.3319, 0.9386]),
           st.sampled_from([0.0907, 0.1311, 0.1386, 0.1736, 0.2108, 0.2142, 0.24, 0.4664, 0.5955, 0.6207]),
           st.sampled_from([0.1768, 0.1878, 0.198, 0.3168, 0.3359, 0.3603, 0.3939, 0.4277, 0.4737, 0.7713]),
           st.sampled_from([0.0325, 0.1108, 0.12, 0.1354, 0.146, 0.263, 0.3521, 0.4124, 0.4254, 0.5708]),
           st.sampled_from([0.0386, 0.0665, 0.1674, 0.2318, 0.2575, 0.2642, 0.3508, 0.3717, 0.3741, 0.434]),
           st.sampled_from([0.0469, 0.1937, 0.2241, 0.2871, 0.3654, 0.3954, 0.4449, 0.4697, 0.5628, 0.7988]),
           st.sampled_from([0.0537, 0.0834, 0.1377, 0.1552, 0.1639, 0.1867, 0.1909, 0.2854, 0.3141, 0.3743]),
           st.sampled_from([0.114, 0.1335, 0.1721, 0.1779, 0.1824, 0.3063, 0.3693, 0.4322, 0.4491, 0.4777]),
           st.sampled_from([0.0492, 0.0629, 0.1119, 0.1192, 0.1201, 0.1449, 0.1967, 0.1976, 0.2709, 0.5084]),
           st.sampled_from([0.0581, 0.092, 0.1181, 0.1299, 0.1665, 0.2525, 0.2581, 0.2764, 0.3097, 0.34]),
           st.sampled_from([0.0495, 0.0701, 0.0795, 0.0951, 0.0959, 0.1112, 0.1258, 0.1688, 0.3241, 0.3385]),
           st.sampled_from([0.0526, 0.0627, 0.0859, 0.0868, 0.09, 0.0946, 0.1139, 0.1283, 0.1359, 0.264]),
           st.sampled_from([0.0154, 0.038, 0.0395, 0.0455, 0.0628, 0.0636, 0.0647, 0.0703, 0.0769, 0.0983]),
           st.sampled_from([0.0099, 0.0101, 0.0131, 0.0136, 0.0142, 0.0153, 0.0155, 0.0199, 0.0475, 0.0825]),
           st.sampled_from([0.0071, 0.0089, 0.013, 0.014, 0.0155, 0.0159, 0.0216, 0.0248, 0.0456, 0.0798]),
           st.floats(min_value=0.00328, max_value=0.00389, allow_nan=False),
           st.sampled_from([0.0048, 0.0063, 0.0065, 0.0076, 0.0078, 0.0093, 0.0103, 0.0108, 0.021, 0.0317]),
           st.sampled_from([0.0015, 0.0031, 0.0077, 0.0081, 0.0084, 0.0108, 0.0127, 0.016, 0.0187, 0.0294]),
           st.sampled_from([0.0012, 0.0037, 0.0074, 0.0086, 0.0091, 0.0099, 0.0109, 0.0175, 0.019, 0.0447]),
           st.sampled_from([0.0008, 0.0016, 0.0035, 0.0046, 0.0058, 0.0092, 0.0152, 0.0157, 0.0193, 0.0212]),
           st.sampled_from([0.0009, 0.002, 0.0035, 0.0037, 0.0048, 0.0052, 0.0071, 0.0086, 0.0132, 0.0201]),
           st.sampled_from([0.0013, 0.003, 0.0035, 0.0044, 0.0045, 0.0093, 0.0107, 0.0127, 0.0145, 0.0225]),
           st.sampled_from([0.0036, 0.0053, 0.0065, 0.0079, 0.0081, 0.0082, 0.0083, 0.0105, 0.0112, 0.0114]),
           st.sampled_from([0.0014, 0.0022, 0.0023, 0.0024, 0.0033, 0.0037, 0.0044, 0.0048, 0.0074, 0.0231]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_11(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_11']['n_samples'] += 1
        self.data['tests']['test_11']['samples'].append(x_test)
        self.data['tests']['test_11']['y_expected'].append(y_expected[0])
        self.data['tests']['test_11']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0108, 0.0124, 0.02, 0.0202, 0.0208, 0.0216, 0.0231, 0.026, 0.0336, 0.0442]),
           st.sampled_from([0.0006, 0.0045, 0.0078, 0.0215, 0.0221, 0.0222, 0.044, 0.0477, 0.0509, 0.0653]),
           st.sampled_from([0.0058, 0.0068, 0.0081, 0.0131, 0.019, 0.0273, 0.0326, 0.0388, 0.0481, 0.0484]),
           st.sampled_from([0.007, 0.0206, 0.0293, 0.0304, 0.0313, 0.0339, 0.0378, 0.0444, 0.0824, 0.0889]),
           st.sampled_from([0.0067, 0.0278, 0.0391, 0.0458, 0.0496, 0.061, 0.0681, 0.0752, 0.082, 0.2565]),
           st.sampled_from([0.0102, 0.0136, 0.0458, 0.0473, 0.0546, 0.0591, 0.0795, 0.086, 0.1635, 0.2583]),
           st.sampled_from([0.0033, 0.0361, 0.0568, 0.0659, 0.1015, 0.1023, 0.1098, 0.1161, 0.1263, 0.1539]),
           st.sampled_from([0.0616, 0.064, 0.0836, 0.108, 0.1119, 0.139, 0.1833, 0.2362, 0.2467, 0.3583]),
           st.floats(min_value=0.33746, max_value=0.41994, allow_nan=False),
           st.sampled_from([0.0389, 0.0452, 0.0973, 0.1186, 0.1328, 0.1376, 0.1483, 0.1631, 0.2522, 0.3759]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0269, 0.0861, 0.0909, 0.1102, 0.1207, 0.2545, 0.3358, 0.3473, 0.3476, 0.3952]),
           st.sampled_from([0.0493, 0.0513, 0.0618, 0.104, 0.1204, 0.1599, 0.2624, 0.3299, 0.3647, 0.3686]),
           st.sampled_from([0.0911, 0.1065, 0.1194, 0.2558, 0.2606, 0.2826, 0.2988, 0.3046, 0.5078, 0.5785]),
           st.sampled_from([0.0166, 0.0346, 0.0708, 0.1457, 0.1514, 0.168, 0.2716, 0.3491, 0.4985, 0.6509]),
           st.floats(min_value=0.53648, max_value=0.66654, allow_nan=False),
           st.sampled_from([0.0699, 0.1066, 0.1268, 0.1463, 0.1568, 0.1929, 0.4474, 0.515, 0.6759, 0.8669]),
           st.floats(min_value=0.1121, max_value=0.13074, allow_nan=False),
           st.sampled_from([0.1078, 0.2991, 0.3295, 0.3862, 0.42, 0.5929, 0.621, 0.7434, 0.8215, 0.9407]),
           st.sampled_from([0.0656, 0.1426, 0.1544, 0.4333, 0.5122, 0.5717, 0.5858, 0.6299, 0.861, 0.8769]),
           st.sampled_from([0.2005, 0.2146, 0.2741, 0.3031, 0.5053, 0.5103, 0.5958, 0.5959, 0.6484, 0.8631]),
           st.sampled_from([0.1608, 0.4292, 0.4441, 0.5071, 0.6952, 0.7146, 0.7235, 0.7652, 0.8747, 0.9976]),
           st.sampled_from([0.2085, 0.24, 0.3361, 0.354, 0.3776, 0.4645, 0.6414, 0.6967, 0.9237, 0.9664]),
           st.sampled_from([0.3914, 0.4286, 0.547, 0.7114, 0.8037, 0.8133, 0.8757, 0.8948, 0.8966, 0.9027]),
           st.sampled_from([0.15, 0.2476, 0.4106, 0.4466, 0.6009, 0.6338, 0.7272, 0.7283, 0.7732, 0.8367]),
           st.sampled_from([0.2413, 0.2626, 0.4862, 0.5218, 0.5334, 0.5599, 0.5782, 0.7476, 0.8206, 0.9481]),
           st.sampled_from([0.0874, 0.2054, 0.5448, 0.5736, 0.6319, 0.6632, 0.7654, 0.8105, 0.9196, 0.9823]),
           st.sampled_from([0.3971, 0.4146, 0.4926, 0.5356, 0.5429, 0.7669, 0.7862, 0.8049, 0.8752, 0.8833]),
           st.sampled_from([0.2177, 0.4434, 0.4936, 0.5009, 0.5578, 0.6036, 0.6762, 0.7124, 0.797, 0.8028]),
           st.sampled_from([0.0613, 0.0823, 0.2028, 0.3857, 0.3925, 0.5508, 0.6318, 0.6616, 0.7128, 0.7293]),
           st.sampled_from([0.4161, 0.4756, 0.4766, 0.4841, 0.5517, 0.5619, 0.6299, 0.6701, 0.8052, 0.8096]),
           st.sampled_from([0.1592, 0.1745, 0.2959, 0.4007, 0.4055, 0.4532, 0.5141, 0.5375, 0.6354, 0.7508]),
           st.sampled_from([0.1942, 0.1984, 0.2797, 0.2817, 0.333, 0.6764, 0.7262, 0.7757, 0.8067, 0.9708]),
           st.floats(min_value=0.55795, max_value=0.69213, allow_nan=False),
           st.sampled_from([0.2487, 0.2876, 0.3147, 0.5305, 0.5531, 0.7676, 0.7863, 0.8537, 0.9017, 0.9481]),
           st.sampled_from([0.0549, 0.0671, 0.1108, 0.1558, 0.2268, 0.2276, 0.2297, 0.3235, 0.5163, 0.718]),
           st.sampled_from([0.0476, 0.1058, 0.2463, 0.4604, 0.4679, 0.5917, 0.696, 0.7076, 0.8459, 0.9497]),
           st.sampled_from([0.0383, 0.1057, 0.1371, 0.1373, 0.173, 0.3037, 0.315, 0.4424, 0.7866, 0.8409]),
           st.sampled_from([0.0712, 0.1583, 0.168, 0.1845, 0.1847, 0.2282, 0.2405, 0.3392, 0.3684, 0.9709]),
           st.sampled_from([0.0117, 0.206, 0.2806, 0.2866, 0.3163, 0.3179, 0.3244, 0.3749, 0.6148, 0.6326]),
           st.sampled_from([0.0601, 0.062, 0.1552, 0.1713, 0.222, 0.2344, 0.2509, 0.2917, 0.3321, 0.5651]),
           st.sampled_from([0.044, 0.0674, 0.2028, 0.2031, 0.265, 0.292, 0.2941, 0.2975, 0.5898, 0.7247]),
           st.sampled_from([0.0835, 0.1391, 0.1733, 0.1756, 0.1902, 0.244, 0.2648, 0.3355, 0.3431, 0.7733]),
           st.sampled_from([0.0898, 0.1238, 0.1262, 0.1269, 0.1606, 0.1657, 0.1801, 0.1867, 0.2235, 0.4256]),
           st.sampled_from([0.0533, 0.0894, 0.1102, 0.1155, 0.1215, 0.1421, 0.1464, 0.2288, 0.2641, 0.4295]),
           st.sampled_from([0.0333, 0.0528, 0.0724, 0.091, 0.0933, 0.0978, 0.1044, 0.1886, 0.2732, 0.3424]),
           st.sampled_from([0.0183, 0.0469, 0.0479, 0.0509, 0.0602, 0.0623, 0.0663, 0.0838, 0.2303, 0.3096]),
           st.sampled_from([0.0114, 0.0198, 0.03, 0.0469, 0.0693, 0.0789, 0.1133, 0.1297, 0.1498, 0.1522]),
           st.sampled_from([0.0073, 0.0208, 0.0304, 0.0356, 0.0436, 0.045, 0.0507, 0.052, 0.0563, 0.1366]),
           st.sampled_from([0.0, 0.007, 0.0088, 0.012, 0.0162, 0.0217, 0.0224, 0.0226, 0.0269, 0.0469]),
           st.sampled_from([0.0023, 0.0047, 0.0053, 0.0113, 0.0121, 0.0155, 0.0168, 0.0206, 0.0232, 0.0307]),
           st.floats(min_value=0.00392, max_value=0.01731, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0022, 0.0032, 0.0049, 0.0055, 0.0071, 0.0096, 0.0131, 0.0166, 0.0223, 0.0265]),
           st.sampled_from([0.0018, 0.0021, 0.0027, 0.0044, 0.0074, 0.0108, 0.0115, 0.0117, 0.0171, 0.0184]),
           st.sampled_from([0.0037, 0.004, 0.0047, 0.0054, 0.0055, 0.0073, 0.0084, 0.0102, 0.0109, 0.0188]),
           st.sampled_from([0.0018, 0.0041, 0.0054, 0.0058, 0.0075, 0.0087, 0.0093, 0.0122, 0.0139, 0.0167]),
           st.sampled_from([0.0028, 0.0041, 0.0042, 0.0096, 0.0117, 0.014, 0.0143, 0.0158, 0.018, 0.0229]),
           st.sampled_from([0.0048, 0.0057, 0.0064, 0.0067, 0.0073, 0.0084, 0.0092, 0.0096, 0.014, 0.0162]),
           st.sampled_from([0.0023, 0.003, 0.0052, 0.006, 0.0067, 0.0068, 0.0089, 0.0095, 0.0139, 0.0147]),
           st.sampled_from([0.0011, 0.0014, 0.0016, 0.002, 0.0031, 0.0032, 0.0048, 0.0054, 0.0063, 0.0069]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_12(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_12']['n_samples'] += 1
        self.data['tests']['test_12']['samples'].append(x_test)
        self.data['tests']['test_12']['y_expected'].append(y_expected[0])
        self.data['tests']['test_12']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0089, 0.0107, 0.0131, 0.0197, 0.0235, 0.0261, 0.031, 0.0423, 0.0522, 0.0731]),
           st.sampled_from([0.0121, 0.0191, 0.021, 0.0239, 0.0436, 0.0509, 0.0625, 0.0744, 0.0849, 0.0885]),
           st.sampled_from([0.0178, 0.0235, 0.0274, 0.0289, 0.0411, 0.0436, 0.0498, 0.0696, 0.0709, 0.0992]),
           st.sampled_from([0.0078, 0.0346, 0.0375, 0.0445, 0.0608, 0.0713, 0.0813, 0.0837, 0.1021, 0.1203]),
           st.sampled_from([0.0232, 0.062, 0.063, 0.0635, 0.0711, 0.1117, 0.1215, 0.1409, 0.1443, 0.401]),
           st.sampled_from([0.0116, 0.0629, 0.069, 0.0735, 0.0844, 0.0874, 0.1278, 0.1328, 0.1493, 0.1908]),
           st.sampled_from([0.0384, 0.0539, 0.0662, 0.1108, 0.1326, 0.1577, 0.1606, 0.1787, 0.2002, 0.209]),
           st.sampled_from([0.0055, 0.0456, 0.0929, 0.107, 0.1078, 0.1176, 0.1224, 0.1298, 0.1712, 0.2119]),
           st.floats(min_value=0.41997, max_value=0.47253, exclude_min=True, allow_nan=False),
           st.sampled_from([0.1632, 0.1675, 0.2078, 0.2672, 0.3127, 0.3469, 0.3517, 0.4372, 0.5079, 0.5761]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.2325, 0.2374, 0.2536, 0.2583, 0.2648, 0.2812, 0.2973, 0.365, 0.375, 0.4507]),
           st.sampled_from([0.1023, 0.2314, 0.2419, 0.2782, 0.2863, 0.3089, 0.3375, 0.3927, 0.4012, 0.5554]),
           st.sampled_from([0.2637, 0.2986, 0.3187, 0.4061, 0.4347, 0.4731, 0.4914, 0.569, 0.6855, 0.997]),
           st.sampled_from([0.0906, 0.1739, 0.178, 0.2226, 0.2584, 0.2869, 0.334, 0.3769, 0.4266, 0.5027]),
           st.floats(min_value=0.53648, max_value=0.66654, allow_nan=False),
           st.sampled_from([0.173, 0.198, 0.2086, 0.2507, 0.3021, 0.4423, 0.5954, 0.6441, 0.6588, 0.7402]),
           st.floats(min_value=0.1121, max_value=0.13074, allow_nan=False),
           st.sampled_from([0.1646, 0.1962, 0.212, 0.2434, 0.2678, 0.368, 0.528, 0.5857, 0.8753, 0.8954]),
           st.sampled_from([0.0902, 0.4428, 0.6749, 0.7198, 0.7276, 0.7912, 0.7913, 0.8435, 0.9007, 0.9584]),
           st.sampled_from([0.0576, 0.3355, 0.413, 0.4268, 0.6908, 0.7702, 0.7811, 0.801, 0.824, 0.8396]),
           st.sampled_from([0.2887, 0.3353, 0.3956, 0.4076, 0.4393, 0.789, 0.8454, 0.8632, 0.8633, 0.8641]),
           st.sampled_from([0.3097, 0.4332, 0.5188, 0.5711, 0.6553, 0.7007, 0.8449, 0.9067, 0.9642, 0.9739]),
           st.sampled_from([0.321, 0.6094, 0.6292, 0.6372, 0.674, 0.6805, 0.686, 0.8975, 0.9201, 0.9828]),
           st.sampled_from([0.3711, 0.5557, 0.5825, 0.6665, 0.6926, 0.7221, 0.7806, 0.8587, 0.9536, 0.9888]),
           st.sampled_from([0.329, 0.4475, 0.5423, 0.6433, 0.7367, 0.7707, 0.8045, 0.8321, 0.9137, 0.9945]),
           st.sampled_from([0.3654, 0.581, 0.6131, 0.7215, 0.8754, 0.8917, 0.9089, 0.9699, 0.9819, 0.988]),
           st.sampled_from([0.4099, 0.4402, 0.6957, 0.736, 0.7834, 0.8546, 0.8664, 0.9076, 0.9458, 0.9818]),
           st.sampled_from([0.3168, 0.4146, 0.4732, 0.547, 0.5779, 0.632, 0.7626, 0.7811, 0.8179, 0.9619]),
           st.sampled_from([0.3281, 0.3346, 0.5051, 0.5207, 0.5441, 0.5711, 0.6409, 0.7196, 0.8892, 0.9087]),
           st.sampled_from([0.1, 0.2286, 0.3075, 0.3349, 0.3997, 0.4264, 0.6167, 0.6457, 0.7622, 0.8005]),
           st.sampled_from([0.1198, 0.3104, 0.3544, 0.4465, 0.4567, 0.4855, 0.4867, 0.5369, 0.769, 0.7995]),
           st.sampled_from([0.1478, 0.2186, 0.3321, 0.4362, 0.4586, 0.4781, 0.52, 0.6038, 0.6495, 1.0]),
           st.floats(min_value=0.55795, max_value=0.69213, allow_nan=False),
           st.sampled_from([0.099, 0.1206, 0.1323, 0.2801, 0.2867, 0.296, 0.3093, 0.6755, 0.7505, 0.7843]),
           st.sampled_from([0.0364, 0.0754, 0.0801, 0.0998, 0.1428, 0.2007, 0.4014, 0.4134, 0.7771, 0.8406]),
           st.sampled_from([0.0351, 0.1112, 0.1159, 0.1546, 0.1708, 0.212, 0.2655, 0.2824, 0.3356, 0.7356]),
           st.sampled_from([0.1382, 0.1436, 0.1736, 0.2054, 0.2556, 0.355, 0.4133, 0.476, 0.5955, 0.6176]),
           st.sampled_from([0.0959, 0.1666, 0.2356, 0.2736, 0.2841, 0.3253, 0.3648, 0.3763, 0.3803, 0.5993]),
           st.sampled_from([0.113, 0.1354, 0.138, 0.2407, 0.2729, 0.3494, 0.4021, 0.5208, 0.5259, 0.8116]),
           st.sampled_from([0.0438, 0.1301, 0.1491, 0.2087, 0.2409, 0.2605, 0.2674, 0.3603, 0.3741, 0.5886]),
           st.sampled_from([0.0469, 0.0906, 0.1195, 0.1483, 0.1937, 0.2075, 0.2225, 0.2293, 0.2715, 0.5417]),
           st.sampled_from([0.101, 0.1991, 0.2061, 0.2417, 0.3141, 0.3785, 0.4335, 0.4602, 0.4837, 0.7517]),
           st.sampled_from([0.1391, 0.1512, 0.1631, 0.1721, 0.1862, 0.2092, 0.216, 0.2323, 0.3063, 0.4322]),
           st.sampled_from([0.0673, 0.0902, 0.0945, 0.1499, 0.1577, 0.1675, 0.1748, 0.1854, 0.2662, 0.4374]),
           st.sampled_from([0.0138, 0.0757, 0.0919, 0.1058, 0.147, 0.1545, 0.2438, 0.2525, 0.5293, 0.5692]),
           st.sampled_from([0.0237, 0.0439, 0.0476, 0.0618, 0.1084, 0.1258, 0.1991, 0.234, 0.2594, 0.3385]),
           st.sampled_from([0.0406, 0.0527, 0.0744, 0.0812, 0.13, 0.1558, 0.1654, 0.1888, 0.2037, 0.2779]),
           st.sampled_from([0.0115, 0.0242, 0.0244, 0.0449, 0.0492, 0.0535, 0.0767, 0.0947, 0.0983, 0.1057]),
           st.sampled_from([0.0061, 0.019, 0.0199, 0.0251, 0.0261, 0.0265, 0.0276, 0.0313, 0.0414, 0.0772]),
           st.sampled_from([0.0054, 0.0063, 0.0079, 0.0086, 0.0092, 0.0133, 0.0152, 0.0166, 0.0174, 0.0357]),
           st.floats(min_value=0.00392, max_value=0.01731, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0005, 0.005, 0.0075, 0.0101, 0.0122, 0.0136, 0.0152, 0.017, 0.0189, 0.0191]),
           st.sampled_from([0.0018, 0.0042, 0.0055, 0.0069, 0.0089, 0.0108, 0.0152, 0.0161, 0.0232, 0.0309]),
           st.sampled_from([0.0013, 0.0028, 0.0053, 0.0058, 0.0086, 0.0102, 0.0112, 0.0164, 0.0166, 0.0372]),
           st.sampled_from([0.0027, 0.0029, 0.0058, 0.0065, 0.0067, 0.0072, 0.0095, 0.0117, 0.0119, 0.0193]),
           st.sampled_from([0.002, 0.0024, 0.0038, 0.0054, 0.0065, 0.0107, 0.0127, 0.0171, 0.0201, 0.0218]),
           st.sampled_from([0.0009, 0.0017, 0.0036, 0.0045, 0.009, 0.0105, 0.0138, 0.0145, 0.0194, 0.0224]),
           st.sampled_from([0.0012, 0.0015, 0.0017, 0.0059, 0.0105, 0.0129, 0.0146, 0.021, 0.0243, 0.0245]),
           st.sampled_from([0.0015, 0.0025, 0.0026, 0.0028, 0.003, 0.0042, 0.0047, 0.005, 0.0067, 0.0086]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_13(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_13']['n_samples'] += 1
        self.data['tests']['test_13']['samples'].append(x_test)
        self.data['tests']['test_13']['y_expected'].append(y_expected[0])
        self.data['tests']['test_13']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0115, 0.0131, 0.0176, 0.0181, 0.024, 0.026, 0.027, 0.0286, 0.0365, 0.0368]),
           st.sampled_from([0.0026, 0.0093, 0.0104, 0.0146, 0.0153, 0.0171, 0.0186, 0.0232, 0.034, 0.0509]),
           st.sampled_from([0.0026, 0.0081, 0.0089, 0.0092, 0.0242, 0.039, 0.0466, 0.0501, 0.0692, 0.0771]),
           st.sampled_from([0.0141, 0.0173, 0.0174, 0.0289, 0.0293, 0.0336, 0.0372, 0.044, 0.0445, 0.0518]),
           st.sampled_from([0.0211, 0.0217, 0.0278, 0.0319, 0.0358, 0.0521, 0.1163, 0.1183, 0.1197, 0.1724]),
           st.sampled_from([0.02, 0.0513, 0.0534, 0.0546, 0.0618, 0.0637, 0.0706, 0.0806, 0.0973, 0.3823]),
           st.sampled_from([0.0688, 0.0843, 0.0889, 0.0892, 0.1015, 0.1083, 0.1139, 0.1161, 0.1422, 0.1947]),
           st.sampled_from([0.0687, 0.0697, 0.0817, 0.0883, 0.0941, 0.1016, 0.1741, 0.2033, 0.2145, 0.2385]),
           st.sampled_from([0.0258, 0.0569, 0.0576, 0.0583, 0.0598, 0.0889, 0.1151, 0.116, 0.1294, 0.2353]),
           st.sampled_from([0.0613, 0.0818, 0.0898, 0.0901, 0.1199, 0.1483, 0.1573, 0.1631, 0.1777, 0.2751]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0501, 0.0658, 0.0794, 0.0909, 0.1209, 0.1245, 0.1518, 0.1599, 0.2115, 0.3565]),
           st.sampled_from([0.0184, 0.089, 0.1542, 0.1874, 0.1912, 0.2812, 0.352, 0.3906, 0.3973, 0.4545]),
           st.sampled_from([0.1179, 0.1856, 0.214, 0.2557, 0.2573, 0.258, 0.2722, 0.3335, 0.4012, 0.6916]),
           st.sampled_from([0.0198, 0.0346, 0.0912, 0.1278, 0.1729, 0.2099, 0.2603, 0.294, 0.5584, 0.585]),
           st.floats(min_value=0.53648, max_value=0.66654, allow_nan=False),
           st.sampled_from([0.0892, 0.1177, 0.1264, 0.1477, 0.2532, 0.3175, 0.4022, 0.5395, 0.7231, 0.8341]),
           st.floats(min_value=0.13077, max_value=0.30461, exclude_min=True, allow_nan=False),
           st.sampled_from([0.1078, 0.1316, 0.1397, 0.2032, 0.388, 0.4026, 0.4077, 0.5078, 0.6086, 0.8024]),
           st.sampled_from([0.1165, 0.2091, 0.2631, 0.3247, 0.3501, 0.4463, 0.4797, 0.491, 0.4948, 0.9402]),
           st.sampled_from([0.1976, 0.347, 0.3485, 0.3733, 0.4019, 0.443, 0.4925, 0.4978, 0.6079, 1.0]),
           st.sampled_from([0.1994, 0.2013, 0.2104, 0.2302, 0.2957, 0.4574, 0.8825, 0.9403, 0.9735, 1.0]),
           st.sampled_from([0.3361, 0.3393, 0.3647, 0.4238, 0.5544, 0.5854, 0.6384, 0.6415, 0.8225, 0.8335]),
           st.sampled_from([0.1426, 0.1686, 0.4286, 0.547, 0.5906, 0.7523, 0.7701, 0.8253, 0.8894, 0.9214]),
           st.sampled_from([0.0395, 0.4609, 0.4718, 0.5331, 0.6833, 0.8109, 0.8218, 0.8505, 0.8675, 0.9192]),
           st.sampled_from([0.1923, 0.32, 0.5136, 0.5341, 0.6793, 0.6797, 0.6937, 0.8204, 0.8458, 0.9174]),
           st.sampled_from([0.2054, 0.4086, 0.4468, 0.4772, 0.5256, 0.6981, 0.828, 0.8684, 0.9307, 0.9821]),
           st.floats(min_value=0.17747, max_value=0.21473, allow_nan=False),
           st.sampled_from([0.2356, 0.3942, 0.4423, 0.4856, 0.6291, 0.6825, 0.8028, 0.8073, 0.8534, 0.8877]),
           st.sampled_from([0.3822, 0.4591, 0.462, 0.6153, 0.6592, 0.769, 0.7736, 0.8296, 0.866, 0.9619]),
           st.sampled_from([0.2005, 0.3007, 0.3788, 0.4766, 0.5517, 0.558, 0.5619, 0.6601, 0.6701, 0.8448]),
           st.sampled_from([0.1235, 0.141, 0.3318, 0.4055, 0.4082, 0.4235, 0.4924, 0.4935, 0.734, 0.76]),
           st.sampled_from([0.0637, 0.162, 0.1863, 0.2779, 0.3735, 0.5121, 0.5385, 0.6902, 0.7662, 0.7704]),
           st.floats(min_value=0.55795, max_value=0.69213, allow_nan=False),
           st.sampled_from([0.077, 0.1306, 0.1742, 0.2297, 0.2314, 0.2467, 0.304, 0.4396, 0.5021, 0.7863]),
           st.sampled_from([0.1036, 0.2698, 0.4546, 0.5569, 0.5757, 0.665, 0.7022, 0.7313, 0.9605, 1.0]),
           st.sampled_from([0.2216, 0.3382, 0.3446, 0.4577, 0.4679, 0.4827, 0.5468, 0.6062, 0.6116, 0.6359]),
           st.sampled_from([0.1048, 0.1373, 0.1601, 0.1866, 0.1888, 0.1953, 0.3352, 0.3466, 0.379, 0.393]),
           st.sampled_from([0.0371, 0.0407, 0.0855, 0.2569, 0.2723, 0.348, 0.3684, 0.4611, 0.5647, 0.9709]),
           st.sampled_from([0.0866, 0.1454, 0.1811, 0.188, 0.2792, 0.2806, 0.3163, 0.3508, 0.3662, 0.641]),
           st.sampled_from([0.1151, 0.1264, 0.1659, 0.1901, 0.2003, 0.2292, 0.2344, 0.2769, 0.3318, 0.7751]),
           st.sampled_from([0.1013, 0.1915, 0.2028, 0.2029, 0.2587, 0.3868, 0.4813, 0.4824, 0.5977, 0.6633]),
           st.sampled_from([0.0597, 0.107, 0.1136, 0.1605, 0.1716, 0.1808, 0.1902, 0.1983, 0.2377, 0.2948]),
           st.sampled_from([0.0584, 0.0949, 0.1129, 0.1148, 0.1437, 0.1696, 0.1867, 0.247, 0.4256, 0.7762]),
           st.sampled_from([0.0194, 0.0369, 0.0787, 0.0909, 0.0944, 0.1102, 0.1326, 0.1492, 0.1903, 0.1946]),
           st.sampled_from([0.0025, 0.0278, 0.0391, 0.0528, 0.0681, 0.0729, 0.1136, 0.1178, 0.1271, 0.2024]),
           st.sampled_from([0.0073, 0.0179, 0.0491, 0.053, 0.0608, 0.0749, 0.099, 0.1252, 0.196, 0.4331]),
           st.sampled_from([0.0416, 0.048, 0.0538, 0.0688, 0.0956, 0.0982, 0.0988, 0.1062, 0.1198, 0.2021]),
           st.sampled_from([0.0102, 0.0106, 0.0108, 0.0201, 0.0285, 0.0325, 0.0337, 0.045, 0.0681, 0.0773]),
           st.sampled_from([0.0074, 0.0093, 0.0101, 0.0162, 0.0172, 0.0205, 0.0216, 0.0224, 0.024, 0.0439]),
           st.sampled_from([0.0018, 0.0023, 0.0033, 0.0052, 0.0066, 0.0078, 0.0082, 0.0093, 0.0098, 0.0199]),
           st.floats(min_value=0.00392, max_value=0.01731, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0023, 0.0052, 0.0055, 0.0057, 0.0065, 0.0067, 0.0071, 0.0131, 0.0158, 0.0265]),
           st.sampled_from([0.0013, 0.003, 0.0036, 0.0056, 0.0084, 0.0105, 0.0109, 0.0117, 0.015, 0.0153]),
           st.sampled_from([0.0006, 0.0036, 0.0044, 0.0051, 0.0053, 0.0055, 0.0083, 0.0096, 0.0203, 0.0212]),
           st.sampled_from([0.0015, 0.0047, 0.0051, 0.0063, 0.007, 0.0077, 0.0089, 0.0108, 0.0122, 0.0191]),
           st.sampled_from([0.0003, 0.0028, 0.0034, 0.0105, 0.0112, 0.0132, 0.0152, 0.0164, 0.0229, 0.0316]),
           st.sampled_from([0.0013, 0.003, 0.0031, 0.0032, 0.0034, 0.0039, 0.005, 0.0062, 0.0085, 0.018]),
           st.sampled_from([0.0006, 0.0028, 0.0043, 0.0046, 0.0053, 0.0057, 0.0067, 0.007, 0.0073, 0.0078]),
           st.sampled_from([0.0018, 0.0031, 0.0036, 0.0045, 0.0064, 0.008, 0.0087, 0.0103, 0.0134, 0.0138]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_14(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_14']['n_samples'] += 1
        self.data['tests']['test_14']['samples'].append(x_test)
        self.data['tests']['test_14']['y_expected'].append(y_expected[0])
        self.data['tests']['test_14']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0072, 0.0156, 0.0197, 0.0258, 0.0264, 0.027, 0.0443, 0.053, 0.0654, 0.115]),
           st.sampled_from([0.0059, 0.0198, 0.0201, 0.0221, 0.0446, 0.0627, 0.0821, 0.0849, 0.1065, 0.2339]),
           st.sampled_from([0.0117, 0.0269, 0.0289, 0.0367, 0.0474, 0.0488, 0.0518, 0.1219, 0.1526, 0.1665]),
           st.sampled_from([0.0082, 0.0128, 0.0177, 0.0195, 0.0561, 0.0564, 0.0618, 0.1008, 0.118, 0.166]),
           st.sampled_from([0.0214, 0.0403, 0.0529, 0.0711, 0.074, 0.0746, 0.0915, 0.1158, 0.1284, 0.401]),
           st.sampled_from([0.0443, 0.069, 0.0779, 0.1171, 0.126, 0.1579, 0.163, 0.1795, 0.2103, 0.277]),
           st.sampled_from([0.0771, 0.08, 0.0938, 0.1024, 0.1201, 0.1458, 0.1463, 0.1487, 0.1543, 0.1626]),
           st.sampled_from([0.0862, 0.1209, 0.1219, 0.14, 0.1584, 0.1918, 0.214, 0.2161, 0.2613, 0.346]),
           st.sampled_from([0.0466, 0.0598, 0.095, 0.135, 0.137, 0.1739, 0.187, 0.2017, 0.2119, 0.2442]),
           st.sampled_from([0.078, 0.1294, 0.2127, 0.2154, 0.2282, 0.2792, 0.3199, 0.39, 0.4372, 0.5915]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0236, 0.0367, 0.084, 0.0904, 0.2087, 0.2154, 0.2389, 0.2719, 0.3323, 0.5033]),
           st.sampled_from([0.1788, 0.2268, 0.2657, 0.2926, 0.3089, 0.3136, 0.4144, 0.5201, 0.5554, 0.5677]),
           st.sampled_from([0.1402, 0.1472, 0.1727, 0.1887, 0.1893, 0.2829, 0.3308, 0.3495, 0.4287, 0.4731]),
           st.sampled_from([0.1635, 0.1739, 0.1804, 0.2226, 0.295, 0.2965, 0.3236, 0.5369, 0.6421, 0.6777]),
           st.floats(min_value=0.53648, max_value=0.66654, allow_nan=False),
           st.sampled_from([0.0903, 0.1247, 0.173, 0.2088, 0.2143, 0.3748, 0.4784, 0.5655, 0.5954, 0.6441]),
           st.floats(min_value=0.13077, max_value=0.30461, exclude_min=True, allow_nan=False),
           st.sampled_from([0.2071, 0.2678, 0.2828, 0.3219, 0.3257, 0.368, 0.7309, 0.7602, 0.8954, 0.9832]),
           st.sampled_from([0.154, 0.5006, 0.5492, 0.7686, 0.7932, 0.8107, 0.8381, 0.8702, 0.8856, 1.0]),
           st.sampled_from([0.3184, 0.489, 0.581, 0.7326, 0.7616, 0.765, 0.7969, 0.7992, 0.8416, 0.9162]),
           st.sampled_from([0.1127, 0.1241, 0.31, 0.3834, 0.4393, 0.468, 0.6181, 0.667, 0.6879, 1.0]),
           st.sampled_from([0.3914, 0.4333, 0.5268, 0.7109, 0.7136, 0.7717, 0.8705, 0.9014, 0.9122, 0.9284]),
           st.sampled_from([0.5697, 0.6113, 0.6403, 0.7298, 0.8313, 0.9101, 0.9236, 0.952, 0.9607, 0.9757]),
           st.sampled_from([0.6207, 0.6352, 0.7201, 0.7519, 0.7756, 0.8079, 0.844, 0.9655, 0.9716, 1.0]),
           st.sampled_from([0.2279, 0.3443, 0.4606, 0.6607, 0.6757, 0.6767, 0.7576, 0.7595, 0.8337, 0.9801]),
           st.sampled_from([0.1617, 0.581, 0.6934, 0.7567, 0.918, 0.9375, 0.9395, 0.9474, 0.9547, 0.9896]),
           st.floats(min_value=0.21476, max_value=0.3718, exclude_min=True, allow_nan=False),
           st.sampled_from([0.7306, 0.7591, 0.8348, 0.8477, 0.8519, 0.8528, 0.8962, 0.899, 0.9092, 0.9619]),
           st.sampled_from([0.4, 0.4178, 0.5207, 0.5572, 0.5667, 0.6456, 0.6585, 0.6925, 0.7821, 0.8892]),
           st.sampled_from([0.2522, 0.3075, 0.3698, 0.3825, 0.4301, 0.5101, 0.5168, 0.7138, 0.8086, 0.9657]),
           st.sampled_from([0.2375, 0.2447, 0.2897, 0.3169, 0.3339, 0.4795, 0.4855, 0.548, 0.6505, 0.7995]),
           st.sampled_from([0.1534, 0.2042, 0.2186, 0.2925, 0.3197, 0.3939, 0.6038, 0.7204, 0.7605, 0.7774]),
           st.floats(min_value=0.55795, max_value=0.69213, allow_nan=False),
           st.sampled_from([0.0776, 0.0956, 0.1445, 0.1866, 0.2421, 0.296, 0.3967, 0.5926, 0.6835, 0.8083]),
           st.sampled_from([0.1245, 0.1297, 0.1477, 0.1588, 0.2007, 0.4219, 0.4296, 0.4694, 0.5188, 0.6884]),
           st.sampled_from([0.1708, 0.177, 0.1869, 0.2655, 0.2818, 0.3201, 0.3704, 0.7337, 0.8195, 0.8327]),
           st.sampled_from([0.0936, 0.096, 0.1648, 0.2023, 0.248, 0.3242, 0.3367, 0.4455, 0.487, 0.7426]),
           st.sampled_from([0.0894, 0.1666, 0.2236, 0.2404, 0.2545, 0.325, 0.3655, 0.4144, 0.4572, 0.6788]),
           st.sampled_from([0.113, 0.187, 0.2715, 0.2939, 0.3004, 0.3482, 0.3806, 0.4367, 0.484, 0.5505]),
           st.sampled_from([0.036, 0.0386, 0.0846, 0.1562, 0.2321, 0.2575, 0.2778, 0.281, 0.2912, 0.5046]),
           st.sampled_from([0.0906, 0.102, 0.1367, 0.2621, 0.2676, 0.3342, 0.3651, 0.3834, 0.4312, 0.4449]),
           st.sampled_from([0.0308, 0.0869, 0.1476, 0.1909, 0.2706, 0.2728, 0.3131, 0.3178, 0.3404, 0.3632]),
           st.sampled_from([0.1157, 0.1862, 0.1925, 0.2267, 0.4542, 0.4646, 0.4831, 0.4921, 0.5663, 0.5762]),
           st.sampled_from([0.0594, 0.066, 0.1192, 0.1393, 0.1625, 0.201, 0.2986, 0.4892, 0.5214, 0.5294]),
           st.sampled_from([0.0417, 0.0566, 0.0676, 0.0965, 0.1058, 0.1146, 0.147, 0.1483, 0.2525, 0.5904]),
           st.sampled_from([0.0434, 0.0439, 0.0643, 0.107, 0.1383, 0.1578, 0.1688, 0.3195, 0.3385, 0.5522]),
           st.sampled_from([0.0526, 0.072, 0.1082, 0.1196, 0.121, 0.1363, 0.1477, 0.15, 0.264, 0.2779]),
           st.sampled_from([0.0098, 0.0392, 0.0399, 0.0436, 0.0596, 0.0615, 0.0636, 0.0665, 0.0777, 0.1219]),
           st.sampled_from([0.0056, 0.0101, 0.0134, 0.0136, 0.0143, 0.0176, 0.0281, 0.0414, 0.0507, 0.051]),
           st.sampled_from([0.0063, 0.0109, 0.0118, 0.0137, 0.0223, 0.0271, 0.0291, 0.031, 0.0353, 0.1004]),
           st.floats(min_value=0.00392, max_value=0.01731, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0056, 0.007, 0.0086, 0.0099, 0.0103, 0.0122, 0.0127, 0.0175, 0.019, 0.0197]),
           st.sampled_from([0.0018, 0.0019, 0.002, 0.0054, 0.0069, 0.0123, 0.0144, 0.0152, 0.0187, 0.0232]),
           st.sampled_from([0.0014, 0.0019, 0.0082, 0.0087, 0.0096, 0.0102, 0.012, 0.0166, 0.018, 0.027]),
           st.sampled_from([0.0012, 0.0029, 0.0031, 0.0041, 0.0042, 0.0055, 0.0074, 0.0081, 0.0151, 0.0277]),
           st.sampled_from([0.0016, 0.0021, 0.0025, 0.003, 0.0032, 0.0034, 0.0062, 0.0084, 0.0087, 0.0097]),
           st.sampled_from([0.0054, 0.0062, 0.0099, 0.0105, 0.0107, 0.0122, 0.0155, 0.0162, 0.0168, 0.0244]),
           st.sampled_from([0.0013, 0.0022, 0.0024, 0.0025, 0.0043, 0.0045, 0.0061, 0.0063, 0.0082, 0.019]),
           st.sampled_from([0.0014, 0.0019, 0.0023, 0.0027, 0.0032, 0.0048, 0.0092, 0.0126, 0.0156, 0.0218]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_15(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_15']['n_samples'] += 1
        self.data['tests']['test_15']['samples'].append(x_test)
        self.data['tests']['test_15']['y_expected'].append(y_expected[0])
        self.data['tests']['test_15']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0068, 0.0126, 0.0139, 0.0164, 0.0181, 0.0208, 0.0211, 0.0298, 0.0368, 0.0762]),
           st.sampled_from([0.0045, 0.0068, 0.0102, 0.0124, 0.0171, 0.0185, 0.0221, 0.0454, 0.0519, 0.0956]),
           st.sampled_from([0.0051, 0.0169, 0.0206, 0.0217, 0.0218, 0.0324, 0.0507, 0.0641, 0.0819, 0.0953]),
           st.sampled_from([0.0061, 0.0263, 0.0286, 0.0339, 0.0371, 0.0518, 0.0689, 0.0889, 0.1252, 0.1732]),
           st.sampled_from([0.0079, 0.0097, 0.0133, 0.0215, 0.0253, 0.0476, 0.0608, 0.0652, 0.1315, 0.1615]),
           st.sampled_from([0.0473, 0.069, 0.0706, 0.089, 0.0906, 0.1164, 0.1323, 0.1589, 0.1635, 0.2294]),
           st.sampled_from([0.0531, 0.0843, 0.0892, 0.0895, 0.1083, 0.1178, 0.1201, 0.1798, 0.2112, 0.2156]),
           st.sampled_from([0.0315, 0.044, 0.0579, 0.0668, 0.0697, 0.0893, 0.1024, 0.1172, 0.1401, 0.411]),
           st.sampled_from([0.0487, 0.0743, 0.0759, 0.0844, 0.0889, 0.0974, 0.1235, 0.1384, 0.3109, 0.3429]),
           st.sampled_from([0.0242, 0.0561, 0.0837, 0.1036, 0.118, 0.1268, 0.1452, 0.2668, 0.2751, 0.2872]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0387, 0.0472, 0.0658, 0.0948, 0.1102, 0.137, 0.1599, 0.2237, 0.3223, 0.3282]),
           st.sampled_from([0.0644, 0.089, 0.092, 0.1424, 0.1683, 0.2042, 0.3197, 0.3647, 0.4091, 0.4256]),
           st.sampled_from([0.1191, 0.1194, 0.156, 0.1619, 0.263, 0.2826, 0.2976, 0.3046, 0.4038, 0.7797]),
           st.sampled_from([0.0166, 0.0801, 0.2603, 0.3232, 0.3769, 0.5485, 0.6308, 0.6479, 0.6953, 0.6962]),
           st.floats(min_value=0.4832, max_value=0.59994, allow_nan=False),
           st.sampled_from([0.1568, 0.1699, 0.207, 0.2933, 0.3491, 0.3657, 0.515, 0.7521, 0.9739, 0.9819]),
           st.sampled_from([0.1205, 0.1442, 0.1765, 0.2179, 0.2573, 0.2849, 0.3796, 0.3809, 0.5964, 0.9185]),
           st.sampled_from([0.1455, 0.2298, 0.2991, 0.3326, 0.388, 0.42, 0.4509, 0.7157, 0.7271, 0.9064]),
           st.sampled_from([0.1426, 0.2595, 0.3005, 0.3258, 0.3345, 0.3907, 0.391, 0.4395, 0.4553, 0.7918]),
           st.sampled_from([0.1847, 0.2069, 0.231, 0.2741, 0.3542, 0.446, 0.5053, 0.6079, 0.7561, 0.8319]),
           st.sampled_from([0.1608, 0.2816, 0.3151, 0.4052, 0.4075, 0.4574, 0.4764, 0.7545, 0.8747, 0.9224]),
           st.sampled_from([0.3156, 0.5782, 0.5854, 0.6313, 0.6967, 0.7867, 0.887, 0.939, 0.9409, 1.0]),
           st.sampled_from([0.4601, 0.5386, 0.5399, 0.547, 0.6173, 0.6741, 0.6933, 0.7012, 0.8037, 0.8253]),
           st.sampled_from([0.024, 0.0616, 0.15, 0.2561, 0.4958, 0.7043, 0.7732, 0.844, 0.8505, 0.8918]),
           st.sampled_from([0.1653, 0.5218, 0.5647, 0.6215, 0.6543, 0.8223, 0.8275, 0.8788, 0.8901, 0.9802]),
           st.sampled_from([0.2054, 0.2984, 0.5593, 0.6053, 0.6197, 0.6981, 0.6995, 0.6997, 0.7652, 0.8345]),
           st.sampled_from([0.365, 0.375, 0.3788, 0.498, 0.6124, 0.6471, 0.6624, 0.6941, 0.8457, 0.9503]),
           st.sampled_from([0.2356, 0.3333, 0.4434, 0.4488, 0.4667, 0.4739, 0.6036, 0.6289, 0.797, 0.8545]),
           st.sampled_from([0.3822, 0.4411, 0.5201, 0.5775, 0.6281, 0.6986, 0.7293, 0.7575, 0.7812, 0.9621]),
           st.sampled_from([0.1631, 0.1816, 0.2206, 0.3007, 0.3534, 0.5753, 0.5786, 0.7063, 0.7792, 0.9236]),
           st.sampled_from([0.159, 0.182, 0.1921, 0.2024, 0.2946, 0.3666, 0.4611, 0.4983, 0.5181, 0.666]),
           st.sampled_from([0.0637, 0.1339, 0.2025, 0.3459, 0.4124, 0.5185, 0.6601, 0.6764, 0.6902, 0.7662]),
           st.floats(min_value=0.69216, max_value=0.74666, exclude_min=True, allow_nan=False),
           st.sampled_from([0.1665, 0.1952, 0.304, 0.3647, 0.568, 0.5902, 0.6825, 0.729, 0.7676, 0.8529]),
           st.sampled_from([0.0352, 0.3228, 0.4499, 0.4593, 0.5122, 0.5972, 0.7409, 0.7523, 0.9605, 0.9922]),
           st.sampled_from([0.0379, 0.0429, 0.0535, 0.0589, 0.1058, 0.1073, 0.1212, 0.2459, 0.2463, 0.8912]),
           st.sampled_from([0.1154, 0.1373, 0.1707, 0.1953, 0.3352, 0.3509, 0.393, 0.4129, 0.6097, 0.8388]),
           st.sampled_from([0.0612, 0.0696, 0.1582, 0.1583, 0.1845, 0.1951, 0.389, 0.4738, 0.5479, 0.8849]),
           st.sampled_from([0.1089, 0.1319, 0.189, 0.1969, 0.197, 0.2366, 0.2792, 0.2866, 0.4816, 0.6133]),
           st.sampled_from([0.062, 0.1552, 0.161, 0.1659, 0.2292, 0.2509, 0.3019, 0.3321, 0.5651, 0.6035]),
           st.sampled_from([0.0431, 0.0569, 0.0652, 0.0674, 0.1641, 0.2028, 0.2304, 0.2444, 0.2522, 0.5977]),
           st.sampled_from([0.0351, 0.071, 0.0758, 0.0793, 0.1272, 0.149, 0.2211, 0.2402, 0.3684, 0.3802]),
           st.sampled_from([0.0337, 0.0713, 0.0845, 0.0949, 0.1294, 0.1761, 0.1789, 0.1916, 0.2235, 0.2808]),
           st.sampled_from([0.0533, 0.0758, 0.1134, 0.1153, 0.1582, 0.1651, 0.1669, 0.1937, 0.2217, 0.2378]),
           st.sampled_from([0.0176, 0.021, 0.0374, 0.064, 0.066, 0.0695, 0.0815, 0.091, 0.1433, 0.1938]),
           st.sampled_from([0.0342, 0.0357, 0.0491, 0.0567, 0.0738, 0.0867, 0.099, 0.1043, 0.1723, 0.1874]),
           st.sampled_from([0.0219, 0.0254, 0.029, 0.0407, 0.0418, 0.0422, 0.0476, 0.0634, 0.0863, 0.1164]),
           st.floats(min_value=0.05367, max_value=0.06708, allow_nan=False),
           st.sampled_from([0.0059, 0.0061, 0.0064, 0.0074, 0.0101, 0.017, 0.0172, 0.0196, 0.0204, 0.0318]),
           st.sampled_from([0.0019, 0.0023, 0.0029, 0.0033, 0.0058, 0.0062, 0.0091, 0.0153, 0.03, 0.0309]),
           st.sampled_from([0.0022, 0.0028, 0.0038, 0.0056, 0.0061, 0.0087, 0.0106, 0.0133, 0.0157, 0.0167]),
           st.sampled_from([0.0016, 0.0022, 0.0023, 0.0038, 0.0111, 0.0153, 0.016, 0.0237, 0.0248, 0.0255]),
           st.sampled_from([0.0021, 0.0035, 0.0051, 0.006, 0.0079, 0.0105, 0.0114, 0.0135, 0.0153, 0.0174]),
           st.sampled_from([0.0018, 0.0054, 0.007, 0.0075, 0.0079, 0.0094, 0.0106, 0.0114, 0.0124, 0.0128]),
           st.sampled_from([0.0019, 0.0021, 0.0029, 0.0037, 0.0048, 0.0075, 0.0077, 0.0078, 0.0092, 0.0097]),
           st.sampled_from([0.0024, 0.0026, 0.0037, 0.0049, 0.0058, 0.0096, 0.0113, 0.0137, 0.0199, 0.0316]),
           st.sampled_from([0.0015, 0.0037, 0.0043, 0.0047, 0.0094, 0.0095, 0.0102, 0.0162, 0.0179, 0.0196]),
           st.sampled_from([0.0039, 0.0046, 0.006, 0.0077, 0.0086, 0.0095, 0.0107, 0.0108, 0.0116, 0.0255]),
           st.sampled_from([0.0025, 0.0033, 0.006, 0.0063, 0.0067, 0.0069, 0.0079, 0.0085, 0.0095, 0.0102]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_16(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_16']['n_samples'] += 1
        self.data['tests']['test_16']['samples'].append(x_test)
        self.data['tests']['test_16']['y_expected'].append(y_expected[0])
        self.data['tests']['test_16']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0072, 0.0095, 0.0156, 0.0201, 0.0283, 0.0305, 0.0491, 0.0707, 0.0715, 0.1088]),
           st.sampled_from([0.0163, 0.0173, 0.0221, 0.0239, 0.0267, 0.0274, 0.0277, 0.042, 0.0535, 0.0944]),
           st.sampled_from([0.0115, 0.017, 0.0239, 0.0248, 0.0344, 0.0386, 0.0447, 0.0504, 0.0518, 0.0577]),
           st.sampled_from([0.0108, 0.0218, 0.0243, 0.0272, 0.033, 0.0346, 0.0633, 0.0688, 0.0793, 0.0837]),
           st.sampled_from([0.0185, 0.0214, 0.0403, 0.062, 0.0711, 0.076, 0.0839, 0.0988, 0.1026, 0.1217]),
           st.sampled_from([0.0418, 0.0443, 0.0491, 0.0629, 0.0808, 0.1278, 0.1354, 0.1651, 0.1731, 0.1827]),
           st.sampled_from([0.0773, 0.0812, 0.0944, 0.0956, 0.1258, 0.1287, 0.1326, 0.1465, 0.1488, 0.1787]),
           st.sampled_from([0.0391, 0.0644, 0.1098, 0.1176, 0.122, 0.1613, 0.1694, 0.1833, 0.2018, 0.2161]),
           st.sampled_from([0.0548, 0.1583, 0.1723, 0.1894, 0.2085, 0.2442, 0.261, 0.2794, 0.2832, 0.3048]),
           st.sampled_from([0.0113, 0.0193, 0.1345, 0.1747, 0.2013, 0.2028, 0.211, 0.2354, 0.2597, 0.5761]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0991, 0.2087, 0.2154, 0.2362, 0.2399, 0.2721, 0.3323, 0.3404, 0.3425, 0.5205]),
           st.sampled_from([0.0616, 0.1476, 0.2112, 0.251, 0.271, 0.2863, 0.299, 0.3, 0.5127, 0.5379]),
           st.sampled_from([0.1023, 0.1795, 0.1951, 0.2294, 0.3087, 0.3099, 0.3769, 0.3915, 0.4296, 0.4303]),
           st.sampled_from([0.0683, 0.0775, 0.1413, 0.1635, 0.198, 0.2035, 0.295, 0.2965, 0.438, 0.5205]),
           st.floats(min_value=0.59997, max_value=0.61328, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0903, 0.1247, 0.1901, 0.2579, 0.2803, 0.5996, 0.6588, 0.7402, 0.823, 0.8622]),
           st.sampled_from([0.2613, 0.3345, 0.5772, 0.6291, 0.6711, 0.7096, 0.7577, 0.8476, 0.8647, 0.9173]),
           st.sampled_from([0.2784, 0.3219, 0.3568, 0.3714, 0.406, 0.6803, 0.7782, 0.7922, 0.9828, 0.9975]),
           st.sampled_from([0.2665, 0.3107, 0.3679, 0.3926, 0.4079, 0.4293, 0.4552, 0.4578, 0.9584, 0.9634]),
           st.sampled_from([0.0576, 0.3184, 0.3272, 0.5248, 0.5562, 0.5606, 0.7156, 0.7616, 0.9349, 0.9777]),
           st.sampled_from([0.3712, 0.5222, 0.5231, 0.632, 0.6373, 0.7581, 0.7918, 0.7928, 0.8717, 0.9422]),
           st.sampled_from([0.061, 0.2556, 0.4332, 0.4337, 0.7109, 0.7143, 0.7716, 0.7852, 0.8697, 0.9126]),
           st.sampled_from([0.1874, 0.1928, 0.3202, 0.541, 0.6292, 0.6889, 0.6911, 0.7786, 0.9261, 0.9408]),
           st.sampled_from([0.1934, 0.3452, 0.486, 0.6177, 0.6207, 0.6534, 0.7745, 0.8555, 0.9104, 0.9932]),
           st.sampled_from([0.5324, 0.6325, 0.8395, 0.8412, 0.8585, 0.8674, 0.8814, 0.8959, 0.9395, 0.9409]),
           st.sampled_from([0.3572, 0.4697, 0.5353, 0.5643, 0.8576, 0.9301, 0.9375, 0.9395, 0.9448, 0.9819]),
           st.sampled_from([0.2484, 0.3444, 0.4548, 0.5122, 0.5801, 0.708, 0.7325, 0.9128, 0.9187, 0.9471]),
           st.sampled_from([0.1008, 0.3168, 0.3856, 0.3869, 0.5512, 0.5765, 0.632, 0.7591, 0.8005, 0.9464]),
           st.sampled_from([0.2636, 0.3281, 0.3369, 0.4789, 0.485, 0.5213, 0.5572, 0.6074, 0.6482, 0.7025]),
           st.sampled_from([0.1446, 0.2848, 0.3714, 0.4973, 0.5455, 0.6108, 0.7382, 0.8086, 0.8828, 0.9273]),
           st.sampled_from([0.1276, 0.2533, 0.286, 0.3335, 0.3719, 0.5369, 0.5547, 0.5558, 0.7995, 0.8522]),
           st.sampled_from([0.0477, 0.0743, 0.0846, 0.2937, 0.4245, 0.5359, 0.537, 0.6705, 0.7132, 0.7605]),
           st.floats(min_value=0.69216, max_value=0.74666, exclude_min=True, allow_nan=False),
           st.sampled_from([0.1019, 0.1287, 0.2189, 0.2223, 0.2321, 0.2753, 0.3317, 0.3638, 0.4469, 0.7963]),
           st.sampled_from([0.114, 0.1245, 0.1406, 0.1816, 0.1817, 0.3356, 0.3511, 0.4195, 0.4219, 0.4619]),
           st.sampled_from([0.1066, 0.201, 0.22, 0.3167, 0.3201, 0.359, 0.4234, 0.6938, 0.7356, 0.88]),
           st.sampled_from([0.1226, 0.1382, 0.1438, 0.1648, 0.1713, 0.203, 0.4565, 0.6207, 0.7426, 0.9303]),
           st.sampled_from([0.0436, 0.1215, 0.1667, 0.2266, 0.3253, 0.3603, 0.4708, 0.5683, 0.5774, 0.5993]),
           st.sampled_from([0.1108, 0.1598, 0.214, 0.3228, 0.424, 0.4255, 0.4882, 0.4977, 0.5208, 0.5505]),
           st.sampled_from([0.0492, 0.0846, 0.122, 0.1322, 0.1562, 0.1599, 0.1602, 0.2912, 0.4467, 0.5177]),
           st.sampled_from([0.0328, 0.0469, 0.1329, 0.1669, 0.2241, 0.2634, 0.2711, 0.2715, 0.2879, 0.3184]),
           st.sampled_from([0.0537, 0.078, 0.1639, 0.1863, 0.2614, 0.3702, 0.4335, 0.4461, 0.5251, 0.5351]),
           st.sampled_from([0.0255, 0.0675, 0.1335, 0.1694, 0.1951, 0.265, 0.2788, 0.3387, 0.5663, 0.5762]),
           st.sampled_from([0.0395, 0.1278, 0.1439, 0.1459, 0.1625, 0.4221, 0.4366, 0.4373, 0.5084, 0.6448]),
           st.sampled_from([0.0138, 0.0723, 0.0785, 0.1111, 0.1177, 0.1423, 0.1751, 0.1883, 0.5649, 0.6214]),
           st.sampled_from([0.0237, 0.0264, 0.0373, 0.039, 0.0775, 0.0841, 0.1258, 0.1319, 0.1541, 0.1766]),
           st.sampled_from([0.0081, 0.0223, 0.0303, 0.0367, 0.0398, 0.0772, 0.0972, 0.1035, 0.1102, 0.1928]),
           st.floats(min_value=0.05367, max_value=0.06708, allow_nan=False),
           st.sampled_from([0.0056, 0.0061, 0.0176, 0.0191, 0.0193, 0.0194, 0.0246, 0.0276, 0.03, 0.0424]),
           st.sampled_from([0.0028, 0.0091, 0.013, 0.0155, 0.0159, 0.0171, 0.0213, 0.0216, 0.0222, 0.0249]),
           st.sampled_from([0.0071, 0.0095, 0.0117, 0.0132, 0.0156, 0.0164, 0.0176, 0.0181, 0.0309, 0.0362]),
           st.sampled_from([0.0019, 0.0049, 0.0055, 0.007, 0.0126, 0.0127, 0.0174, 0.0199, 0.0232, 0.0361]),
           st.sampled_from([0.0022, 0.0069, 0.0072, 0.0077, 0.0082, 0.0087, 0.0088, 0.0107, 0.021, 0.0237]),
           st.sampled_from([0.0038, 0.0049, 0.0057, 0.0083, 0.0099, 0.0112, 0.0124, 0.0164, 0.018, 0.0281]),
           st.sampled_from([0.0032, 0.0038, 0.0046, 0.0049, 0.0053, 0.0054, 0.0063, 0.0131, 0.0193, 0.0277]),
           st.sampled_from([0.0032, 0.0034, 0.0048, 0.0057, 0.0066, 0.0101, 0.011, 0.0127, 0.0177, 0.0355]),
           st.sampled_from([0.0056, 0.006, 0.0066, 0.0094, 0.0108, 0.0115, 0.0127, 0.0194, 0.0321, 0.044]),
           st.sampled_from([0.0051, 0.0055, 0.0062, 0.0067, 0.0077, 0.0085, 0.0105, 0.0126, 0.0134, 0.016]),
           st.sampled_from([0.0006, 0.0007, 0.0019, 0.0023, 0.0031, 0.0035, 0.005, 0.0112, 0.0115, 0.0131]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_17(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_17']['n_samples'] += 1
        self.data['tests']['test_17']['samples'].append(x_test)
        self.data['tests']['test_17']['y_expected'].append(y_expected[0])
        self.data['tests']['test_17']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0156, 0.0228, 0.0231, 0.0238, 0.0283, 0.043, 0.0587, 0.0629, 0.0712, 0.0731]),
           st.sampled_from([0.0027, 0.0141, 0.0253, 0.0297, 0.0333, 0.0383, 0.0423, 0.0436, 0.0535, 0.1226]),
           st.sampled_from([0.012, 0.0164, 0.0202, 0.0248, 0.0329, 0.0367, 0.0386, 0.0422, 0.0539, 0.0833]),
           st.sampled_from([0.0225, 0.0363, 0.0479, 0.0521, 0.0525, 0.0566, 0.0624, 0.0768, 0.0818, 0.1021]),
           st.sampled_from([0.0351, 0.0519, 0.0611, 0.0646, 0.08, 0.0835, 0.0887, 0.1117, 0.1276, 0.2252]),
           st.sampled_from([0.0526, 0.069, 0.0744, 0.0783, 0.1022, 0.1171, 0.1227, 0.1515, 0.1524, 0.1908]),
           st.sampled_from([0.0961, 0.111, 0.1465, 0.1489, 0.1597, 0.1606, 0.1709, 0.1776, 0.209, 0.2263]),
           st.sampled_from([0.0664, 0.0771, 0.0805, 0.0903, 0.0991, 0.1219, 0.143, 0.1702, 0.1712, 0.2407]),
           st.sampled_from([0.0466, 0.0548, 0.1522, 0.1777, 0.2365, 0.2462, 0.261, 0.2804, 0.2832, 0.307]),
           st.sampled_from([0.0113, 0.0795, 0.1444, 0.181, 0.2127, 0.2169, 0.2271, 0.2952, 0.3914, 0.5025]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0904, 0.1741, 0.2023, 0.239, 0.2442, 0.2568, 0.2621, 0.2869, 0.3263, 0.4754]),
           st.sampled_from([0.177, 0.2112, 0.2275, 0.2934, 0.299, 0.3049, 0.3809, 0.4012, 0.4032, 0.5554]),
           st.sampled_from([0.1526, 0.1806, 0.2547, 0.2637, 0.2829, 0.2917, 0.2956, 0.3361, 0.4398, 0.4731]),
           st.sampled_from([0.0092, 0.0673, 0.1801, 0.188, 0.2759, 0.2949, 0.3313, 0.3575, 0.5095, 0.5607]),
           st.floats(min_value=0.53648, max_value=0.66654, allow_nan=False),
           st.sampled_from([0.0903, 0.216, 0.2507, 0.4274, 0.442, 0.5334, 0.6011, 0.7071, 0.7655, 0.9382]),
           st.sampled_from([0.2226, 0.2417, 0.2429, 0.2852, 0.3274, 0.3797, 0.536, 0.6291, 0.7113, 0.9173]),
           st.sampled_from([0.1228, 0.2826, 0.3257, 0.3382, 0.3568, 0.3609, 0.6601, 0.695, 0.9146, 0.9832]),
           st.sampled_from([0.2975, 0.3345, 0.5269, 0.5844, 0.6339, 0.7264, 0.7265, 0.7913, 0.9007, 0.901]),
           st.sampled_from([0.2395, 0.696, 0.7702, 0.7894, 0.8346, 0.8379, 0.8959, 0.9162, 0.9921, 1.0]),
           st.sampled_from([0.1973, 0.2143, 0.3677, 0.385, 0.4698, 0.5949, 0.7397, 0.7718, 0.8318, 0.8641]),
           st.sampled_from([0.1703, 0.3622, 0.4333, 0.4379, 0.5703, 0.6372, 0.7978, 0.8302, 0.8601, 0.8688]),
           st.sampled_from([0.1611, 0.4532, 0.5943, 0.5995, 0.6372, 0.6699, 0.7223, 0.8453, 0.8673, 0.9607]),
           st.sampled_from([0.1773, 0.4106, 0.6367, 0.6705, 0.7868, 0.8079, 0.8587, 0.9327, 0.951, 0.9655]),
           st.sampled_from([0.0921, 0.1543, 0.5488, 0.5609, 0.8084, 0.8337, 0.8395, 0.9562, 0.9945, 0.9985]),
           st.sampled_from([0.0989, 0.3309, 0.3654, 0.7688, 0.8706, 0.8787, 0.8847, 0.9089, 0.9564, 1.0]),
           st.sampled_from([0.3269, 0.5801, 0.7278, 0.7834, 0.8375, 0.8388, 0.8547, 0.8987, 0.9818, 0.982]),
           st.sampled_from([0.1008, 0.3161, 0.3869, 0.7896, 0.8326, 0.8722, 0.8937, 0.899, 0.904, 0.9223]),
           st.sampled_from([0.202, 0.2636, 0.2918, 0.4016, 0.4178, 0.4789, 0.4848, 0.5441, 0.6018, 0.6257]),
           st.sampled_from([0.2286, 0.2767, 0.2848, 0.3554, 0.356, 0.3924, 0.6041, 0.7514, 0.7691, 0.9065]),
           st.sampled_from([0.1164, 0.1198, 0.1711, 0.1891, 0.3129, 0.3397, 0.4289, 0.6408, 0.8086, 0.9168]),
           st.sampled_from([0.1089, 0.1534, 0.2042, 0.2308, 0.3149, 0.3197, 0.424, 0.5, 0.525, 0.537]),
           st.floats(min_value=0.69216, max_value=0.74666, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0223, 0.1446, 0.1675, 0.2753, 0.2801, 0.2896, 0.3093, 0.3317, 0.3967, 0.3994]),
           st.sampled_from([0.0561, 0.1149, 0.126, 0.2249, 0.3578, 0.3762, 0.4219, 0.6879, 0.799, 0.8406]),
           st.sampled_from([0.0756, 0.0888, 0.1681, 0.201, 0.225, 0.3356, 0.3704, 0.3725, 0.5983, 0.7356]),
           st.sampled_from([0.0946, 0.1411, 0.1713, 0.1748, 0.3089, 0.3763, 0.4374, 0.4799, 0.5932, 0.5955]),
           st.sampled_from([0.1416, 0.1652, 0.1801, 0.2519, 0.2736, 0.3001, 0.3215, 0.3648, 0.6721, 0.8827]),
           st.sampled_from([0.0849, 0.0996, 0.113, 0.2412, 0.2483, 0.4022, 0.424, 0.4882, 0.5529, 0.6086]),
           st.sampled_from([0.0386, 0.0492, 0.1201, 0.1455, 0.1674, 0.3074, 0.3508, 0.3859, 0.4059, 0.4627]),
           st.sampled_from([0.1483, 0.1591, 0.1702, 0.2458, 0.2785, 0.2895, 0.3184, 0.3654, 0.4965, 0.6075]),
           st.sampled_from([0.0537, 0.101, 0.1313, 0.1669, 0.247, 0.2494, 0.2614, 0.2665, 0.4288, 0.5351]),
           st.sampled_from([0.0812, 0.1335, 0.137, 0.1387, 0.1512, 0.1753, 0.2047, 0.2527, 0.2587, 0.3722]),
           st.sampled_from([0.0594, 0.1017, 0.1427, 0.1459, 0.1675, 0.1724, 0.1878, 0.2017, 0.2846, 0.3955]),
           st.sampled_from([0.0443, 0.0581, 0.1294, 0.1806, 0.1901, 0.1985, 0.2012, 0.3097, 0.3639, 0.3839]),
           st.sampled_from([0.0523, 0.0727, 0.0899, 0.1065, 0.1173, 0.1541, 0.1554, 0.1699, 0.1716, 0.1937]),
           st.sampled_from([0.0608, 0.0749, 0.0921, 0.096, 0.1044, 0.121, 0.13, 0.1477, 0.1706, 0.1806]),
           st.floats(min_value=0.06711, max_value=0.0933, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0059, 0.0089, 0.0099, 0.0169, 0.0224, 0.0265, 0.0323, 0.0356, 0.0473, 0.0475]),
           st.sampled_from([0.0009, 0.0104, 0.0118, 0.0129, 0.0151, 0.0185, 0.0202, 0.0206, 0.0216, 0.0244]),
           st.sampled_from([0.0057, 0.0089, 0.0115, 0.0121, 0.0142, 0.016, 0.0172, 0.02, 0.0321, 0.0376]),
           st.sampled_from([0.0024, 0.0027, 0.0038, 0.0062, 0.0082, 0.0094, 0.0097, 0.0099, 0.011, 0.021]),
           st.sampled_from([0.0022, 0.0031, 0.0072, 0.0083, 0.0098, 0.0108, 0.0126, 0.0177, 0.0303, 0.0309]),
           st.sampled_from([0.0033, 0.0046, 0.0065, 0.0086, 0.0096, 0.017, 0.0209, 0.0252, 0.0276, 0.0376]),
           st.sampled_from([0.0012, 0.0029, 0.0044, 0.0071, 0.0098, 0.0111, 0.0114, 0.0161, 0.0167, 0.0326]),
           st.sampled_from([0.0055, 0.0066, 0.0072, 0.008, 0.0103, 0.0132, 0.0138, 0.014, 0.0194, 0.023]),
           st.sampled_from([0.0006, 0.003, 0.0035, 0.006, 0.0062, 0.0063, 0.0073, 0.0085, 0.0094, 0.0194]),
           st.sampled_from([0.0008, 0.0035, 0.0053, 0.006, 0.0074, 0.0079, 0.0103, 0.0115, 0.0134, 0.016]),
           st.sampled_from([0.0026, 0.0031, 0.0037, 0.0049, 0.0051, 0.006, 0.0086, 0.0103, 0.0124, 0.0156]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_18(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_18']['n_samples'] += 1
        self.data['tests']['test_18']['samples'].append(x_test)
        self.data['tests']['test_18']['y_expected'].append(y_expected[0])
        self.data['tests']['test_18']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0065, 0.0132, 0.0164, 0.019, 0.0195, 0.0206, 0.0274, 0.0442, 0.0459, 0.0519]),
           st.sampled_from([0.0038, 0.0062, 0.0063, 0.0166, 0.0275, 0.0294, 0.0319, 0.0453, 0.0491, 0.1632]),
           st.sampled_from([0.0056, 0.0253, 0.0288, 0.0324, 0.0392, 0.0415, 0.0423, 0.0476, 0.0533, 0.0749]),
           st.sampled_from([0.013, 0.0139, 0.0387, 0.0456, 0.046, 0.0469, 0.0622, 0.0774, 0.0824, 0.1252]),
           st.sampled_from([0.0121, 0.0183, 0.0262, 0.0385, 0.0657, 0.1072, 0.1163, 0.157, 0.1674, 0.1724]),
           st.sampled_from([0.0208, 0.0355, 0.0785, 0.0795, 0.1019, 0.1026, 0.1306, 0.1589, 0.175, 0.3823]),
           st.sampled_from([0.0145, 0.0361, 0.0609, 0.0895, 0.138, 0.1392, 0.1422, 0.145, 0.1798, 0.2112]),
           st.sampled_from([0.0219, 0.0951, 0.108, 0.139, 0.1451, 0.149, 0.1601, 0.2002, 0.2041, 0.2362]),
           st.sampled_from([0.0962, 0.1151, 0.116, 0.1294, 0.1384, 0.2083, 0.2876, 0.2992, 0.3109, 0.3416]),
           st.sampled_from([0.0347, 0.0393, 0.0475, 0.0506, 0.0568, 0.0818, 0.092, 0.1109, 0.1302, 0.1631]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0472, 0.0948, 0.1056, 0.137, 0.1382, 0.1518, 0.2434, 0.3473, 0.3645, 0.3952]),
           st.sampled_from([0.0618, 0.1042, 0.1119, 0.1705, 0.1912, 0.2007, 0.2777, 0.352, 0.3738, 0.5472]),
           st.sampled_from([0.0853, 0.1268, 0.134, 0.1411, 0.1619, 0.2557, 0.2613, 0.263, 0.2672, 0.4012]),
           st.floats(min_value=0.41841, max_value=0.52223, allow_nan=False),
           st.floats(min_value=0.66657, max_value=0.73301, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0624, 0.1179, 0.1642, 0.2299, 0.236, 0.31, 0.5638, 0.683, 0.6988, 0.7312]),
           st.sampled_from([0.0939, 0.1105, 0.2127, 0.3201, 0.3417, 0.5364, 0.6682, 0.6888, 0.7776, 0.8057]),
           st.sampled_from([0.2226, 0.2676, 0.299, 0.3294, 0.364, 0.3819, 0.6271, 0.7062, 0.8929, 0.9154]),
           st.sampled_from([0.1165, 0.1286, 0.1734, 0.3258, 0.3501, 0.4553, 0.4567, 0.8701, 0.8769, 0.9657]),
           st.sampled_from([0.1268, 0.1976, 0.231, 0.3797, 0.3932, 0.5328, 0.7473, 0.7832, 0.8017, 0.8106]),
           st.sampled_from([0.1395, 0.1994, 0.5265, 0.6115, 0.7697, 0.7979, 0.8793, 0.8982, 0.9976, 1.0]),
           st.sampled_from([0.206, 0.3306, 0.354, 0.4238, 0.429, 0.4382, 0.4645, 0.5312, 0.5854, 0.6634]),
           st.sampled_from([0.2827, 0.5559, 0.5952, 0.7523, 0.7577, 0.7756, 0.8553, 0.9174, 0.9214, 0.9761]),
           st.sampled_from([0.0747, 0.2043, 0.2476, 0.578, 0.6009, 0.7283, 0.7613, 0.8457, 0.8856, 0.9371]),
           st.sampled_from([0.2278, 0.2285, 0.5715, 0.6042, 0.6215, 0.7476, 0.769, 0.7712, 0.9174, 1.0]),
           st.sampled_from([0.5713, 0.6024, 0.6158, 0.6632, 0.7552, 0.828, 0.8553, 0.8978, 0.9675, 0.9823]),
           st.sampled_from([0.4146, 0.4808, 0.498, 0.5014, 0.5356, 0.5877, 0.6172, 0.7321, 0.8015, 0.8357]),
           st.sampled_from([0.4019, 0.4434, 0.5047, 0.6036, 0.6301, 0.7124, 0.7583, 0.9379, 0.9427, 0.9631]),
           st.sampled_from([0.1594, 0.2385, 0.3244, 0.4161, 0.5387, 0.5648, 0.6235, 0.6387, 0.7128, 0.718]),
           st.floats(min_value=0.32948, max_value=0.39979, allow_nan=False),
           st.sampled_from([0.2214, 0.341, 0.3666, 0.4007, 0.5373, 0.5375, 0.5624, 0.6316, 0.6962, 0.7575]),
           st.sampled_from([0.1423, 0.2227, 0.2672, 0.333, 0.3969, 0.4124, 0.5976, 0.612, 0.6715, 0.6902]),
           st.sampled_from([0.0981, 0.1582, 0.1997, 0.3305, 0.3325, 0.3336, 0.3497, 0.5294, 0.5516, 0.6807]),
           st.sampled_from([0.1362, 0.173, 0.2876, 0.3504, 0.3666, 0.3984, 0.5725, 0.7863, 0.8573, 1.0]),
           st.sampled_from([0.1369, 0.1725, 0.1787, 0.2186, 0.2226, 0.2276, 0.2297, 0.4182, 0.5271, 0.7133]),
           st.sampled_from([0.0379, 0.1073, 0.2043, 0.2216, 0.2459, 0.4679, 0.5408, 0.5468, 0.6253, 0.7766]),
           st.sampled_from([0.0411, 0.0461, 0.1707, 0.173, 0.2056, 0.3037, 0.3352, 0.3505, 0.3742, 0.5031]),
           st.sampled_from([0.1669, 0.1762, 0.2865, 0.2921, 0.2924, 0.348, 0.4943, 0.4993, 0.652, 0.9709]),
           st.sampled_from([0.1062, 0.1444, 0.1969, 0.198, 0.2095, 0.3273, 0.4782, 0.4947, 0.6148, 0.672]),
           st.sampled_from([0.1174, 0.1513, 0.1713, 0.1968, 0.2558, 0.3132, 0.3321, 0.351, 0.3966, 0.4925]),
           st.sampled_from([0.0334, 0.0431, 0.0583, 0.0836, 0.1155, 0.1583, 0.2029, 0.22, 0.2841, 0.5977]),
           st.sampled_from([0.0351, 0.1733, 0.2351, 0.2552, 0.2737, 0.2785, 0.2816, 0.3406, 0.4382, 0.56]),
           st.sampled_from([0.0841, 0.1129, 0.1148, 0.148, 0.1606, 0.1789, 0.2659, 0.2808, 0.3363, 0.4256]),
           st.sampled_from([0.0621, 0.0653, 0.0692, 0.1102, 0.1155, 0.1215, 0.1348, 0.1669, 0.2341, 0.2611]),
           st.sampled_from([0.0516, 0.0528, 0.0635, 0.0688, 0.0724, 0.08, 0.0933, 0.1124, 0.1178, 0.1643]),
           st.sampled_from([0.0183, 0.0365, 0.0426, 0.0546, 0.0567, 0.0838, 0.0879, 0.0926, 0.1018, 0.1211]),
           st.sampled_from([0.0318, 0.0408, 0.0456, 0.0494, 0.0595, 0.0744, 0.0919, 0.095, 0.1062, 0.1403]),
           st.sampled_from([0.0092, 0.0093, 0.0172, 0.0228, 0.0317, 0.0336, 0.0356, 0.0422, 0.0475, 0.052]),
           st.sampled_from([0.0055, 0.0116, 0.0136, 0.0144, 0.0155, 0.0205, 0.0206, 0.024, 0.0266, 0.0358]),
           st.sampled_from([0.0025, 0.0032, 0.0056, 0.0122, 0.0125, 0.0132, 0.0134, 0.0154, 0.0168, 0.03]),
           st.sampled_from([0.0008, 0.0076, 0.0078, 0.0091, 0.0102, 0.014, 0.0145, 0.0201, 0.0346, 0.0386]),
           st.sampled_from([0.001, 0.0032, 0.0042, 0.0074, 0.0122, 0.0131, 0.0151, 0.0158, 0.0166, 0.0237]),
           st.sampled_from([0.0027, 0.0044, 0.0051, 0.0063, 0.0079, 0.0081, 0.0129, 0.0138, 0.0153, 0.0174]),
           st.sampled_from([0.0011, 0.0012, 0.0042, 0.0056, 0.0075, 0.0079, 0.0096, 0.0114, 0.0151, 0.018]),
           st.sampled_from([0.0004, 0.0019, 0.005, 0.0085, 0.0087, 0.0097, 0.0102, 0.0105, 0.0122, 0.0151]),
           st.sampled_from([0.0039, 0.0054, 0.0059, 0.0061, 0.0072, 0.0104, 0.0113, 0.0135, 0.0137, 0.0316]),
           st.sampled_from([0.0016, 0.0026, 0.0038, 0.0042, 0.0055, 0.0056, 0.0057, 0.0092, 0.014, 0.0182]),
           st.sampled_from([0.0026, 0.0039, 0.004, 0.0047, 0.005, 0.0055, 0.0069, 0.0091, 0.0112, 0.0117]),
           st.sampled_from([0.0022, 0.0023, 0.0056, 0.0063, 0.0071, 0.0075, 0.0079, 0.008, 0.011, 0.0122]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_19(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_19']['n_samples'] += 1
        self.data['tests']['test_19']['samples'].append(x_test)
        self.data['tests']['test_19']['y_expected'].append(y_expected[0])
        self.data['tests']['test_19']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0191, 0.0264, 0.0272, 0.0283, 0.031, 0.0388, 0.0587, 0.0654, 0.0712, 0.1021]),
           st.sampled_from([0.0324, 0.0346, 0.0446, 0.0478, 0.0509, 0.0586, 0.0627, 0.0688, 0.0853, 0.1249]),
           st.sampled_from([0.0168, 0.0202, 0.0279, 0.0298, 0.0306, 0.0344, 0.0554, 0.0592, 0.0992, 0.1526]),
           st.sampled_from([0.0108, 0.0128, 0.021, 0.025, 0.0292, 0.0386, 0.057, 0.0713, 0.0768, 0.0848]),
           st.sampled_from([0.0165, 0.0214, 0.0348, 0.0403, 0.0497, 0.0537, 0.0596, 0.0724, 0.0788, 0.1772]),
           st.sampled_from([0.0491, 0.0973, 0.0998, 0.1057, 0.1171, 0.1425, 0.1651, 0.1908, 0.1916, 0.2247]),
           st.sampled_from([0.0384, 0.0617, 0.0773, 0.08, 0.1021, 0.1773, 0.1916, 0.2061, 0.2555, 0.3016]),
           st.sampled_from([0.0929, 0.1071, 0.1117, 0.1516, 0.1584, 0.1607, 0.169, 0.1692, 0.1787, 0.2678]),
           st.floats(min_value=0.26754, max_value=0.33254, allow_nan=False),
           st.sampled_from([0.0351, 0.0945, 0.2067, 0.2079, 0.2354, 0.2952, 0.3597, 0.5915, 0.5965, 0.5966]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0904, 0.1764, 0.2259, 0.247, 0.2601, 0.2671, 0.2719, 0.2869, 0.2933, 0.5044]),
           st.sampled_from([0.2076, 0.251, 0.2896, 0.3033, 0.3055, 0.3375, 0.5201, 0.5237, 0.5379, 0.6173]),
           st.sampled_from([0.0336, 0.1378, 0.1891, 0.2291, 0.3495, 0.394, 0.4048, 0.4343, 0.4398, 0.7842]),
           st.floats(min_value=0.52226, max_value=0.6178, exclude_min=True, allow_nan=False),
           st.floats(min_value=0.66657, max_value=0.73301, exclude_min=True, allow_nan=False),
           st.sampled_from([0.1781, 0.1785, 0.216, 0.2507, 0.2758, 0.291, 0.6237, 0.7402, 0.7655, 0.8087]),
           st.sampled_from([0.0837, 0.2422, 0.2678, 0.3746, 0.3797, 0.3887, 0.4646, 0.5279, 0.6728, 0.8647]),
           st.sampled_from([0.2071, 0.2778, 0.3218, 0.3292, 0.3572, 0.4088, 0.647, 0.7309, 0.7922, 0.8782]),
           st.sampled_from([0.074, 0.1395, 0.1506, 0.3045, 0.6153, 0.6898, 0.7832, 0.7912, 0.8107, 0.9032]),
           st.sampled_from([0.2395, 0.3264, 0.3786, 0.5342, 0.576, 0.7685, 0.796, 0.8346, 0.8416, 0.9275]),
           st.sampled_from([0.1127, 0.3061, 0.3236, 0.4856, 0.632, 0.6708, 0.7507, 0.789, 0.8369, 0.8562]),
           st.sampled_from([0.0563, 0.5875, 0.6644, 0.7107, 0.7716, 0.8375, 0.8688, 0.875, 0.8974, 0.9107]),
           st.sampled_from([0.4357, 0.5426, 0.5995, 0.6094, 0.7773, 0.7786, 0.8512, 0.8975, 0.9129, 0.9236]),
           st.sampled_from([0.1348, 0.4808, 0.5734, 0.5984, 0.6102, 0.8919, 0.9104, 0.9308, 0.9536, 1.0]),
           st.sampled_from([0.2796, 0.329, 0.6141, 0.6318, 0.7825, 0.8412, 0.846, 0.8614, 0.8959, 0.9474]),
           st.sampled_from([0.2571, 0.2908, 0.3309, 0.3892, 0.4024, 0.4139, 0.5643, 0.581, 0.6624, 0.9673]),
           st.sampled_from([0.2847, 0.4636, 0.5323, 0.6134, 0.6139, 0.6196, 0.6896, 0.7544, 0.8664, 0.9941]),
           st.sampled_from([0.3168, 0.3856, 0.4158, 0.4536, 0.4565, 0.5112, 0.8528, 0.8722, 0.8937, 0.8966]),
           st.sampled_from([0.2891, 0.3149, 0.3616, 0.485, 0.5207, 0.6018, 0.6405, 0.7722, 0.9151, 0.9289]),
           st.floats(min_value=0.32948, max_value=0.39979, allow_nan=False),
           st.sampled_from([0.1276, 0.1891, 0.2375, 0.2951, 0.3522, 0.3544, 0.4795, 0.502, 0.5443, 0.9168]),
           st.sampled_from([0.2937, 0.3118, 0.3756, 0.3921, 0.4187, 0.4903, 0.558, 0.5756, 0.6495, 0.7774]),
           st.sampled_from([0.151, 0.1729, 0.1906, 0.2131, 0.2755, 0.3095, 0.3947, 0.6036, 0.6253, 0.6901]),
           st.sampled_from([0.1165, 0.1445, 0.2223, 0.2867, 0.366, 0.5054, 0.5926, 0.6355, 0.6755, 0.6835]),
           st.sampled_from([0.0185, 0.0704, 0.0944, 0.0998, 0.1297, 0.3156, 0.3578, 0.4014, 0.4619, 0.6884]),
           st.sampled_from([0.0756, 0.0888, 0.1234, 0.1433, 0.1829, 0.3087, 0.3619, 0.3809, 0.4441, 0.6938]),
           st.sampled_from([0.0946, 0.172, 0.1742, 0.3089, 0.3314, 0.3741, 0.4799, 0.6176, 0.6411, 0.7493]),
           st.sampled_from([0.0436, 0.1523, 0.2404, 0.2829, 0.2863, 0.3107, 0.3762, 0.4276, 0.5725, 0.6295]),
           st.sampled_from([0.0768, 0.2142, 0.2208, 0.2715, 0.296, 0.3228, 0.3806, 0.4021, 0.5259, 0.6223]),
           st.sampled_from([0.0492, 0.0745, 0.1602, 0.2321, 0.2912, 0.3363, 0.3648, 0.5163, 0.5177, 0.5869]),
           st.sampled_from([0.0328, 0.0824, 0.0906, 0.1483, 0.2293, 0.2423, 0.3184, 0.3809, 0.3954, 0.7988]),
           st.sampled_from([0.078, 0.0834, 0.1238, 0.1557, 0.1875, 0.2112, 0.2385, 0.247, 0.2662, 0.2983]),
           st.sampled_from([0.0722, 0.1723, 0.2092, 0.2229, 0.2256, 0.2587, 0.2802, 0.3202, 0.4286, 0.5027]),
           st.sampled_from([0.0405, 0.0679, 0.1186, 0.1499, 0.1967, 0.1976, 0.3955, 0.396, 0.4366, 0.5013]),
           st.sampled_from([0.0566, 0.0919, 0.092, 0.1117, 0.1146, 0.1234, 0.1665, 0.3097, 0.4232, 0.5649]),
           st.sampled_from([0.0805, 0.0899, 0.094, 0.0945, 0.1112, 0.115, 0.1383, 0.1578, 0.2193, 0.4069]),
           st.sampled_from([0.0367, 0.0505, 0.0553, 0.0749, 0.0817, 0.0954, 0.1359, 0.179, 0.1888, 0.2458]),
           st.sampled_from([0.0115, 0.037, 0.038, 0.0565, 0.0596, 0.0615, 0.0628, 0.0633, 0.0658, 0.1271]),
           st.sampled_from([0.0097, 0.0131, 0.0136, 0.0137, 0.017, 0.0185, 0.019, 0.0211, 0.0222, 0.0275]),
           st.sampled_from([0.0054, 0.0122, 0.0125, 0.0133, 0.0138, 0.0214, 0.0216, 0.0223, 0.0228, 0.0302]),
           st.sampled_from([0.0054, 0.0099, 0.012, 0.0123, 0.0132, 0.0147, 0.0167, 0.0181, 0.0255, 0.0455]),
           st.sampled_from([0.0005, 0.0014, 0.0049, 0.0057, 0.0078, 0.0097, 0.0191, 0.0199, 0.0201, 0.0274]),
           st.sampled_from([0.002, 0.0053, 0.0067, 0.0079, 0.0081, 0.0087, 0.0102, 0.0135, 0.0144, 0.0154]),
           st.sampled_from([0.0015, 0.0031, 0.0053, 0.0068, 0.0121, 0.0127, 0.0209, 0.027, 0.0281, 0.0376]),
           st.sampled_from([0.0061, 0.0063, 0.0089, 0.0101, 0.0111, 0.0125, 0.0133, 0.0157, 0.0185, 0.0212]),
           st.sampled_from([0.0011, 0.0021, 0.0026, 0.0038, 0.0067, 0.0081, 0.0086, 0.0089, 0.0127, 0.014]),
           st.sampled_from([0.0027, 0.003, 0.0039, 0.0046, 0.0057, 0.006, 0.0086, 0.0141, 0.0162, 0.0168]),
           st.sampled_from([0.0013, 0.0021, 0.0063, 0.0067, 0.0124, 0.0152, 0.019, 0.0207, 0.0246, 0.0332]),
           st.sampled_from([0.0017, 0.0023, 0.0033, 0.0035, 0.0047, 0.006, 0.0086, 0.0106, 0.0187, 0.0208]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_20(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [0]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_20']['n_samples'] += 1
        self.data['tests']['test_20']['samples'].append(x_test)
        self.data['tests']['test_20']['y_expected'].append(y_expected[0])
        self.data['tests']['test_20']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0071, 0.0091, 0.0164, 0.0188, 0.02, 0.0217, 0.026, 0.0274, 0.0311, 0.0473]),
           st.sampled_from([0.0078, 0.0116, 0.0122, 0.0309, 0.032, 0.0339, 0.0351, 0.0509, 0.0548, 0.0713]),
           st.sampled_from([0.0075, 0.0138, 0.0155, 0.019, 0.0217, 0.0317, 0.0347, 0.0641, 0.0692, 0.0749]),
           st.sampled_from([0.0236, 0.0286, 0.0304, 0.0378, 0.0394, 0.0494, 0.06, 0.0831, 0.1083, 0.1408]),
           st.sampled_from([0.0079, 0.013, 0.0362, 0.0416, 0.0476, 0.0652, 0.0681, 0.0839, 0.1183, 0.1783]),
           st.sampled_from([0.0488, 0.0534, 0.0649, 0.0682, 0.069, 0.0706, 0.0742, 0.0795, 0.0922, 0.307]),
           st.sampled_from([0.0314, 0.0841, 0.0857, 0.1023, 0.1154, 0.1299, 0.1422, 0.1539, 0.1664, 0.3008]),
           st.sampled_from([0.0272, 0.0506, 0.0535, 0.0608, 0.0697, 0.0941, 0.0954, 0.113, 0.1972, 0.2145]),
           st.floats(min_value=0.33257, max_value=0.40261, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0734, 0.0779, 0.0818, 0.0837, 0.1185, 0.1483, 0.1908, 0.2197, 0.2912, 0.592]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0387, 0.0622, 0.0671, 0.0979, 0.1854, 0.1862, 0.2545, 0.2565, 0.3086, 0.3738]),
           st.sampled_from([0.1197, 0.1424, 0.1507, 0.1542, 0.1546, 0.1908, 0.2305, 0.2789, 0.3299, 0.3951]),
           st.sampled_from([0.0948, 0.1035, 0.1411, 0.1641, 0.1984, 0.2039, 0.263, 0.2673, 0.2826, 0.3854]),
           st.floats(min_value=0.52226, max_value=0.6178, exclude_min=True, allow_nan=False),
           st.floats(min_value=0.66657, max_value=0.73301, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0624, 0.0693, 0.0699, 0.174, 0.2589, 0.2658, 0.7327, 0.7521, 0.835, 1.0]),
           st.sampled_from([0.0939, 0.1199, 0.2047, 0.2838, 0.6122, 0.6193, 0.6595, 0.6888, 0.8253, 0.9293]),
           st.sampled_from([0.0494, 0.0827, 0.3294, 0.364, 0.4327, 0.5929, 0.706, 0.8215, 0.8345, 0.9154]),
           st.sampled_from([0.2086, 0.3247, 0.3918, 0.4567, 0.5717, 0.7542, 0.801, 0.8261, 0.8701, 0.9925]),
           st.sampled_from([0.2741, 0.3158, 0.3485, 0.4084, 0.5001, 0.528, 0.5399, 0.5402, 0.5801, 0.9802]),
           st.sampled_from([0.1571, 0.1989, 0.2622, 0.4764, 0.5212, 0.5573, 0.6628, 0.7676, 0.8515, 0.9847]),
           st.sampled_from([0.3306, 0.4328, 0.4449, 0.452, 0.589, 0.6415, 0.6592, 0.8596, 0.9273, 1.0]),
           st.sampled_from([0.3914, 0.5146, 0.5906, 0.6107, 0.6394, 0.7577, 0.8036, 0.8515, 0.9213, 0.9601]),
           st.sampled_from([0.2484, 0.3178, 0.5268, 0.5643, 0.5756, 0.5946, 0.6833, 0.8109, 0.8762, 0.8918]),
           st.sampled_from([0.1969, 0.462, 0.4862, 0.6875, 0.7115, 0.7152, 0.769, 0.8756, 0.8788, 0.9174]),
           st.sampled_from([0.4642, 0.5601, 0.5759, 0.6501, 0.6997, 0.7158, 0.8345, 0.8684, 0.8745, 0.9821]),
           st.sampled_from([0.3971, 0.5429, 0.5669, 0.654, 0.681, 0.7143, 0.752, 0.8533, 0.9071, 0.9228]),
           st.sampled_from([0.209, 0.3037, 0.3333, 0.4817, 0.5081, 0.526, 0.8339, 0.8467, 0.861, 0.8877]),
           st.sampled_from([0.1103, 0.3559, 0.3822, 0.3857, 0.4456, 0.5508, 0.6235, 0.6318, 0.7508, 0.8014]),
           st.floats(min_value=0.32948, max_value=0.39979, allow_nan=False),
           st.sampled_from([0.0773, 0.102, 0.1235, 0.1592, 0.2055, 0.2214, 0.5045, 0.5499, 0.7352, 0.7571]),
           st.sampled_from([0.2227, 0.2817, 0.2849, 0.4031, 0.4776, 0.5169, 0.5372, 0.5792, 0.675, 0.7547]),
           st.sampled_from([0.1107, 0.1529, 0.1693, 0.1721, 0.3076, 0.3336, 0.3481, 0.6954, 0.805, 0.8443]),
           st.sampled_from([0.077, 0.1306, 0.1407, 0.173, 0.1802, 0.2222, 0.2569, 0.3725, 0.5197, 0.7863]),
           st.sampled_from([0.0352, 0.0549, 0.1558, 0.2276, 0.2297, 0.4787, 0.5142, 0.5564, 0.5843, 0.6718]),
           st.sampled_from([0.0379, 0.0535, 0.2149, 0.2216, 0.2718, 0.3807, 0.3835, 0.5025, 0.6116, 0.696]),
           st.sampled_from([0.0383, 0.204, 0.2347, 0.2446, 0.2673, 0.3742, 0.3831, 0.5581, 0.6313, 0.9252]),
           st.sampled_from([0.1166, 0.1694, 0.184, 0.2396, 0.2723, 0.2916, 0.3312, 0.357, 0.5499, 0.5872]),
           st.sampled_from([0.1286, 0.1493, 0.2366, 0.243, 0.2646, 0.3163, 0.3296, 0.4719, 0.6087, 0.6326]),
           st.sampled_from([0.062, 0.1088, 0.161, 0.1901, 0.222, 0.2502, 0.42, 0.4482, 0.6035, 0.6803]),
           st.sampled_from([0.0511, 0.174, 0.1754, 0.1883, 0.2268, 0.2304, 0.2312, 0.2377, 0.2873, 0.3868]),
           st.sampled_from([0.0758, 0.0893, 0.107, 0.183, 0.2207, 0.2211, 0.2402, 0.2785, 0.4382, 0.4618]),
           st.sampled_from([0.0492, 0.0971, 0.1078, 0.1148, 0.1269, 0.1294, 0.1651, 0.1789, 0.2, 0.3051]),
           st.sampled_from([0.0194, 0.0621, 0.0622, 0.0678, 0.1008, 0.1467, 0.1578, 0.1582, 0.185, 0.2378]),
           st.sampled_from([0.0213, 0.0391, 0.0663, 0.0688, 0.0724, 0.0978, 0.1089, 0.159, 0.2193, 0.2518]),
           st.sampled_from([0.0, 0.0327, 0.0365, 0.0383, 0.0408, 0.0469, 0.0898, 0.1077, 0.1874, 0.3096]),
           st.sampled_from([0.0107, 0.0219, 0.03, 0.0748, 0.0755, 0.0789, 0.0988, 0.1047, 0.1195, 0.1498]),
           st.sampled_from([0.0092, 0.023, 0.0285, 0.0344, 0.0497, 0.0507, 0.0665, 0.1022, 0.1326, 0.1366]),
           st.sampled_from([0.0006, 0.0046, 0.007, 0.0073, 0.0092, 0.0144, 0.0167, 0.0224, 0.0235, 0.0439]),
           st.sampled_from([0.0022, 0.0066, 0.0072, 0.0121, 0.014, 0.0153, 0.0154, 0.0168, 0.017, 0.0309]),
           st.sampled_from([0.0028, 0.0043, 0.0091, 0.0092, 0.0102, 0.0127, 0.0157, 0.0163, 0.0176, 0.0331]),
           st.sampled_from([0.0033, 0.0045, 0.0071, 0.0089, 0.0091, 0.0104, 0.0111, 0.0118, 0.0147, 0.0187]),
           st.sampled_from([0.0021, 0.0063, 0.0074, 0.0076, 0.0077, 0.0078, 0.0093, 0.0142, 0.015, 0.0179]),
           st.sampled_from([0.0065, 0.0068, 0.0081, 0.0088, 0.0094, 0.0105, 0.0109, 0.0123, 0.0151, 0.0164]),
           st.sampled_from([0.0018, 0.0037, 0.0041, 0.0047, 0.006, 0.0069, 0.0074, 0.0096, 0.0102, 0.0169]),
           st.sampled_from([0.0018, 0.0024, 0.0049, 0.0053, 0.0061, 0.0072, 0.0101, 0.0114, 0.0135, 0.0199]),
           st.sampled_from([0.0013, 0.0018, 0.0022, 0.0032, 0.0035, 0.0073, 0.0094, 0.0143, 0.0164, 0.0182]),
           st.sampled_from([0.0021, 0.0024, 0.0047, 0.0051, 0.007, 0.0081, 0.0085, 0.0086, 0.0116, 0.0255]),
           st.sampled_from([0.0014, 0.0023, 0.0035, 0.0037, 0.0038, 0.0077, 0.0095, 0.0102, 0.0108, 0.0163]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_21(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_21']['n_samples'] += 1
        self.data['tests']['test_21']['samples'].append(x_test)
        self.data['tests']['test_21']['y_expected'].append(y_expected[0])
        self.data['tests']['test_21']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted

    @given(st.sampled_from([0.0087, 0.0108, 0.0109, 0.0176, 0.0195, 0.0208, 0.0274, 0.0286, 0.0311, 0.0352]),
           st.sampled_from([0.0086, 0.0189, 0.0213, 0.0218, 0.03, 0.0309, 0.037, 0.0375, 0.04, 0.0653]),
           st.sampled_from([0.0051, 0.0131, 0.0155, 0.0196, 0.0253, 0.0254, 0.0641, 0.0749, 0.0819, 0.0953]),
           st.sampled_from([0.0064, 0.0097, 0.0173, 0.0175, 0.023, 0.0263, 0.0375, 0.0519, 0.1252, 0.1421]),
           st.sampled_from([0.0067, 0.0085, 0.0205, 0.0211, 0.031, 0.0458, 0.0496, 0.0597, 0.082, 0.0954]),
           st.sampled_from([0.0102, 0.0649, 0.0778, 0.0809, 0.0906, 0.1019, 0.1051, 0.1197, 0.175, 0.228]),
           st.sampled_from([0.0033, 0.0362, 0.0422, 0.0897, 0.1201, 0.1392, 0.1422, 0.1664, 0.2156, 0.2211]),
           st.sampled_from([0.0259, 0.0638, 0.0655, 0.0877, 0.0958, 0.1009, 0.1188, 0.1351, 0.1661, 0.3583]),
           st.sampled_from([0.0472, 0.0583, 0.0791, 0.1052, 0.1252, 0.1598, 0.3109, 0.3416, 0.3564, 0.5598]),
           st.sampled_from([0.0474, 0.0864, 0.092, 0.1146, 0.1186, 0.137, 0.1631, 0.2053, 0.2912, 0.592]),
           st.floats(min_value=0.19796, max_value=0.3052, exclude_min=True, allow_nan=False),
           st.sampled_from([0.052, 0.0522, 0.1101, 0.1167, 0.1207, 0.1654, 0.3086, 0.3223, 0.3473, 0.372]),
           st.sampled_from([0.0309, 0.1042, 0.1055, 0.1361, 0.1434, 0.1507, 0.1531, 0.1749, 0.1975, 0.3827]),
           st.sampled_from([0.0593, 0.0848, 0.1591, 0.214, 0.2573, 0.2976, 0.3383, 0.484, 0.532, 0.6916]),
           st.sampled_from([0.0597, 0.0653, 0.0912, 0.1109, 0.1424, 0.1487, 0.4602, 0.4767, 0.4804, 0.6509]),
           st.floats(min_value=0.66657, max_value=0.73301, exclude_min=True, allow_nan=False),
           st.sampled_from([0.1066, 0.1224, 0.1226, 0.1615, 0.2038, 0.2676, 0.3943, 0.4022, 0.5395, 0.6861]),
           st.sampled_from([0.1374, 0.1647, 0.2203, 0.2713, 0.4142, 0.4262, 0.5364, 0.6888, 0.8874, 0.9185]),
           st.sampled_from([0.25, 0.2915, 0.299, 0.3221, 0.3295, 0.3669, 0.3812, 0.4509, 0.5078, 0.7271]),
           st.sampled_from([0.1104, 0.2964, 0.2995, 0.3345, 0.3658, 0.3813, 0.4586, 0.4678, 0.8252, 0.8452]),
           st.sampled_from([0.2224, 0.2429, 0.3363, 0.3733, 0.446, 0.4978, 0.5399, 0.6673, 0.8297, 0.9413]),
           st.sampled_from([0.0219, 0.0689, 0.238, 0.5666, 0.5991, 0.6464, 0.6794, 0.7569, 0.7652, 0.8217]),
           st.sampled_from([0.4645, 0.5789, 0.6313, 0.6384, 0.6471, 0.6634, 0.6712, 0.6987, 0.9237, 0.962]),
           st.sampled_from([0.2264, 0.3648, 0.5399, 0.5453, 0.6168, 0.6741, 0.842, 0.8766, 0.8894, 1.0]),
           st.sampled_from([0.0395, 0.4122, 0.6338, 0.6711, 0.6833, 0.7613, 0.7663, 0.8218, 0.8675, 0.8856]),
           st.sampled_from([0.32, 0.5334, 0.5715, 0.5897, 0.6215, 0.6399, 0.6874, 0.6937, 0.7366, 0.9858]),
           st.sampled_from([0.4086, 0.4181, 0.5872, 0.6158, 0.6389, 0.6995, 0.7652, 0.7726, 0.8807, 1.0]),
           st.sampled_from([0.0832, 0.1811, 0.2989, 0.4492, 0.5087, 0.5669, 0.6124, 0.6941, 0.7669, 0.8049]),
           st.sampled_from([0.2177, 0.4056, 0.4488, 0.5564, 0.6036, 0.6762, 0.6791, 0.7802, 0.8184, 0.8228]),
           st.sampled_from([0.0613, 0.0823, 0.462, 0.4877, 0.5067, 0.6318, 0.6387, 0.769, 0.8063, 0.8659]),
           st.floats(min_value=0.39982, max_value=0.51299, exclude_min=True, allow_nan=False),
           st.sampled_from([0.0587, 0.159, 0.2446, 0.4235, 0.4592, 0.5049, 0.5989, 0.6015, 0.626, 0.7209]),
           st.sampled_from([0.0507, 0.0637, 0.099, 0.1423, 0.317, 0.3746, 0.4031, 0.5588, 0.5934, 0.8108]),
           st.sampled_from([0.0306, 0.1744, 0.2227, 0.3076, 0.511, 0.5159, 0.5308, 0.5389, 0.5621, 0.8897]),
           st.sampled_from([0.0244, 0.1171, 0.1362, 0.173, 0.2222, 0.3044, 0.3504, 0.3609, 0.6776, 0.9885]),
           st.sampled_from([0.0671, 0.0733, 0.1348, 0.2344, 0.5515, 0.5757, 0.5843, 0.6718, 0.7468, 0.7761]),
           st.sampled_from([0.1312, 0.2149, 0.2216, 0.2718, 0.2735, 0.2959, 0.3186, 0.4897, 0.5789, 0.7775]),
           st.sampled_from([0.0603, 0.1358, 0.1866, 0.2166, 0.3505, 0.3597, 0.3683, 0.379, 0.4158, 0.5242]),
           st.sampled_from([0.0855, 0.1374, 0.1598, 0.1669, 0.2338, 0.2924, 0.3171, 0.3392, 0.5915, 0.8849]),
           st.sampled_from([0.0751, 0.1286, 0.2366, 0.269, 0.3253, 0.3508, 0.433, 0.4947, 0.6087, 0.672]),
           st.sampled_from([0.1638, 0.1674, 0.1979, 0.2044, 0.2556, 0.3132, 0.3267, 0.3321, 0.3422, 0.379]),
           st.sampled_from([0.0334, 0.0569, 0.1466, 0.1791, 0.1986, 0.2377, 0.3821, 0.4824, 0.6378, 0.7911]),
           st.sampled_from([0.0758, 0.0893, 0.1391, 0.1597, 0.1684, 0.1716, 0.1882, 0.2207, 0.238, 0.3802]),
           st.sampled_from([0.0583, 0.1129, 0.1238, 0.1268, 0.1705, 0.1778, 0.1789, 0.2059, 0.3202, 0.7762]),
           st.sampled_from([0.0046, 0.0369, 0.0536, 0.1102, 0.1125, 0.123, 0.1353, 0.1651, 0.2288, 0.2611]),
           st.sampled_from([0.0522, 0.058, 0.0635, 0.0654, 0.0724, 0.137, 0.1687, 0.17, 0.1717, 0.3654]),
           st.sampled_from([0.0, 0.0342, 0.0381, 0.0598, 0.0604, 0.0651, 0.079, 0.0797, 0.1829, 0.2303]),
           st.sampled_from([0.0, 0.0085, 0.0152, 0.0254, 0.042, 0.0538, 0.0716, 0.0744, 0.0755, 0.0956]),
           st.sampled_from([0.0102, 0.0155, 0.0172, 0.023, 0.0264, 0.0397, 0.0507, 0.0563, 0.0773, 0.0929]),
           st.sampled_from([0.0064, 0.0068, 0.0074, 0.0077, 0.0155, 0.0162, 0.0178, 0.0196, 0.0206, 0.027]),
           st.sampled_from([0.0045, 0.0051, 0.01, 0.0104, 0.0107, 0.0121, 0.014, 0.0168, 0.0188, 0.036]),
           st.sampled_from([0.0044, 0.0045, 0.0062, 0.0065, 0.0074, 0.009, 0.0193, 0.0204, 0.0212, 0.0223]),
           st.sampled_from([0.0016, 0.0025, 0.0044, 0.0112, 0.012, 0.0129, 0.0134, 0.0149, 0.0175, 0.0223]),
           st.sampled_from([0.0036, 0.0043, 0.0052, 0.0067, 0.0071, 0.0074, 0.0096, 0.01, 0.0115, 0.0138]),
           st.sampled_from([0.0036, 0.0044, 0.0052, 0.0077, 0.0081, 0.01, 0.0105, 0.0108, 0.0164, 0.0202]),
           st.sampled_from([0.0011, 0.0015, 0.0019, 0.0036, 0.0054, 0.0063, 0.007, 0.0073, 0.0102, 0.0198]),
           st.sampled_from([0.0003, 0.0026, 0.0032, 0.0034, 0.0039, 0.0056, 0.0073, 0.008, 0.0217, 0.0258]),
           st.sampled_from([0.0015, 0.002, 0.0024, 0.0028, 0.0032, 0.0035, 0.0047, 0.0092, 0.0116, 0.0161]),
           st.sampled_from([0.0032, 0.0034, 0.004, 0.0053, 0.0066, 0.0067, 0.0089, 0.0091, 0.0107, 0.0147]),
           st.sampled_from([0.0012, 0.0018, 0.002, 0.003, 0.0045, 0.0048, 0.0067, 0.0078, 0.0122, 0.018]))
    @settings(phases=[Phase.generate], max_examples=100)
    def test_22(self, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60):
        x_test = [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50, feature_51, feature_52, feature_53, feature_54, feature_55, feature_56, feature_57, feature_58, feature_59, feature_60]
        y_expected = [1]
        y_predicted = self.model.predict([x_test]).tolist()

        self.data['tests']['test_22']['n_samples'] += 1
        self.data['tests']['test_22']['samples'].append(x_test)
        self.data['tests']['test_22']['y_expected'].append(y_expected[0])
        self.data['tests']['test_22']['y_predicted'].append(y_predicted[0])

        assert y_expected == y_predicted
